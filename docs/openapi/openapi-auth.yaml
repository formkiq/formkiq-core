        openapi: 3.0.0
        info:
          title: FormKiQ API
          contact:
            name: FormKiQ
            url: https://formkiq.com
            email: support@formkiq.com
          x-logo:
            url: https://docs.formkiq.com/docs/latest/_images/formkiq-logo.png
            backgroundColor: '#FFFFFF'
            altText: FormKiQ Logo
          license:
            name: Apache 2.0
            url: https://www.apache.org/licenses/LICENSE-2.0.html
          version: 1.17.1
          description: |
            This API provides endpoints for user authentication including login,  password change, and password reset functionality.
        servers:
        - url: http://localhost
          description: Local development server
        paths:
          /login:
            post:
              summary: User Login
              description: Authenticate a user with a username and password.
              requestBody:
                description: User credentials for login.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserLoginRequest'
              responses:
                "200":
                  description: Login successful. Returns authentication details similar to AWS Cognito.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/UserLoginResponse'
                "401":
                  description: Invalid credentials provided.
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          error:
                            type: string
                            example: Invalid username or password.
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /login/mfa:
            post:
              summary: User MFA Login
              description: Authenticate a user with a username and MFA code.
              requestBody:
                description: User credentials for MFA login.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserMfaLoginRequest'
              responses:
                "200":
                  description: Login successful. Returns authentication details similar to AWS Cognito.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/UserMfaLoginResponse'
                "401":
                  description: Invalid credentials provided.
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          error:
                            type: string
                            example: Invalid username or password.
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /mfa/challenge:
            post:
              summary: User MFA Challenge
              description: Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user.
              requestBody:
                description: User MFA Challenge request
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserMfaChallengeRequest'
              responses:
                "200":
                  description: Login successful. Returns authentication details similar to AWS Cognito.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/UserMfaChallengeResponse'
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /mfa/verify:
            post:
              summary: Registers authenticator with a code
              description: Registers the current user's time-based one-time password (TOTP) authenticator with a code generated in their authenticator app
              requestBody:
                description: Registers authenticator with a code request
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserMfaVerifyRequest'
              responses:
                "200":
                  description: Login successful. Returns authentication details similar to AWS Cognito.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/UserMfaVerifyResponse'
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /challenge:
            post:
              summary: An API to provide the answer to that challenge
              description: An API to provide the answer to that challenge
              requestBody:
                description: User Challenge request
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserChallengeRequest'
              responses:
                "200":
                  description: A successful challenge.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/UserChallengeResponse'
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /changePassword:
            post:
              summary: Change Password
              description: |
                Change the password for an authenticated user.  The user must provide the current (old) password and the new password.
              security:
              - ApiAuthorization: []
              requestBody:
                description: Current and new password details.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ChangePasswordRequest'
              responses:
                "200":
                  description: Password changed successfully.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ChangePasswordResponse'
                "400":
                  description: Invalid input provided.
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          error:
                            type: string
                            example: New password must meet the security requirements
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /forgotPassword:
            post:
              summary: Forgot Password
              description: |
                Initiate the password reset process. The user provides their username  and receives instructions to reset their password.
              requestBody:
                description: Username address of the user requesting password reset.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ForgotPasswordRequest'
              responses:
                "200":
                  description: Password reset instructions sent.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ForgotPasswordResponse'
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
          /forgotPasswordConfirm:
            post:
              summary: Confirm Forgot Password
              description: |
                Confirms the Forgot password reset process.
              requestBody:
                description: Username address of the user requesting password reset.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ForgotPasswordConfirmRequest'
              responses:
                "200":
                  description: Confirms Password reset.
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ForgotPasswordConfirmResponse'
              x-amazon-apigateway-integration:
                $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
        components:
          headers:
            AccessControlAllowOrigin:
              schema:
                type: string
            AccessControlAllowMethods:
              schema:
                type: string
            AccessControlAllowHeaders:
              schema:
                type: string
            Location:
              schema:
                type: string
          securitySchemes:
            ApiAuthorization:
              type: oauth2
              flows: {}
              x-amazon-apigateway-authorizer:
                type: jwt
                jwtConfiguration:
                  issuer:
                    Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
                  audience:
                  - Fn::Sub: ${CognitoUserPoolClient}
                identitySource: $request.header.Authorization
          x-amazon-apigateway-integrations:
            lambdaApi200:
              uri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequestsArn}/invocations
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: '''*'''
                    method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                    method.response.header.Access-Control-Allow-Origin: '''*'''
              passthroughBehavior: when_no_templates
              httpMethod: POST
              type: aws_proxy
              payloadFormatVersion: "1.0"
          schemas:
            UserLoginRequest:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                  description: The name of the user that you want to query or modify
                password:
                  type: string
            UserLoginResponse:
              type: object
              properties:
                challengeName:
                  type: string
                  description: The name of the challenge that you are responding to
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
                authenticationResult:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      description: JWT access token.
                    expiresIn:
                      type: integer
                      description: Time in seconds until the token expires.
                    tokenType:
                      type: string
                      description: Type of token.
                    refreshToken:
                      type: string
                      description: Refresh token for obtaining new access tokens.
                    idToken:
                      type: string
                      description: JWT id token.
            UserMfaLoginRequest:
              type: object
              required:
              - username
              - session
              - softwareTokenMfaCode
              properties:
                username:
                  type: string
                  description: The name of the user that you want to query or modify
                softwareTokenMfaCode:
                  type: string
                  example: Software Token MFA Code
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
            UserMfaLoginResponse:
              type: object
              properties:
                authenticationResult:
                  type: object
                  properties:
                    accessToken:
                      type: string
                      description: JWT access token.
                    expiresIn:
                      type: integer
                      description: Time in seconds until the token expires.
                    tokenType:
                      type: string
                      description: Type of token.
                    refreshToken:
                      type: string
                      description: Refresh token for obtaining new access tokens.
                    idToken:
                      type: string
                      description: JWT id token.
            UserMfaChallengeRequest:
              type: object
              required:
              - session
              properties:
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
            UserMfaChallengeResponse:
              type: object
              properties:
                secretCode:
                  type: string
                  description: A unique generated shared secret code that is used by the TOTP algorithm to generate a one-time code
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
            UserChallengeRequest:
              type: object
              required:
              - session
              - challengeName
              - username
              properties:
                username:
                  type: string
                  description: The name of the user that you want to query or modify
                challengeName:
                  type: string
                  description: The name of the next challenge that you must respond to
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
                newPassword:
                  type: string
                  description: User's New Password
            UserChallengeResponse:
              type: object
              properties:
                challengeName:
                  type: string
                  description: The name of the next challenge that you must respond to
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
            ChangePasswordRequest:
              type: object
              required:
              - oldPassword
              - newPassword
              properties:
                oldPassword:
                  type: string
                  description: User's Old Password
                newPassword:
                  type: string
                  description: User's New Password
            ChangePasswordResponse:
              type: object
              properties:
                message:
                  type: string
            ForgotPasswordRequest:
              type: object
              required:
              - username
              properties:
                username:
                  type: string
                  description: The name of the user that you want to query or modify
            ForgotPasswordResponse:
              type: object
              properties:
                message:
                  type: string
            ForgotPasswordConfirmRequest:
              type: object
              required:
              - username
              - code
              - password
              properties:
                username:
                  type: string
                  description: The name of the user that you want to query or modify
                code:
                  type: string
                password:
                  type: string
            ForgotPasswordConfirmResponse:
              type: object
              properties:
                message:
                  type: string
            UserMfaVerifyRequest:
              type: object
              required:
              - session
              - userCode
              properties:
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses
                userCode:
                  type: string
                  description: A TOTP that the user generated in their configured authenticator app
                deviceName:
                  type: string
                  description: A friendly name for the device that's running the TOTP authenticator
            UserMfaVerifyResponse:
              type: object
              properties:
                status:
                  type: string
                  description: This response parameter indicates the success of TOTP verification
                session:
                  type: string
                  description: The session identifier that maintains the state of authentication requests and challenge responses