AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - API
Parameters:
  AppEnvironment:
    Type: String
    AllowedPattern: ".+"
    Description: The Document Stack Environment
  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "pro"]
  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 512
    MinValue: 128
    MaxValue: 3008
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60
  EnablePublicUrls:
    Description: Whether to enable public urls
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
  AllowAdminCreateUserOnly:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
Resources:
  DocumentsApiRequests:
    Type: AWS::Serverless::Function
    DependsOn:
      - DocumentsApiRequestsRole
    Properties:
      Handler: com.formkiq.stacks.api.CoreRequestHandler
      Runtime: provided
      Timeout: !Sub "${LambdaTimeout}"
      MemorySize: !Sub "${LambdaMemory}"
      CodeUri: ./build/distributions/lambda-api-graalvm.zip
      Environment:
        Variables:
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
          DEBUG: false
          DOCUMENTS_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
          CACHE_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName:1}}"
          DOCUMENTS_S3_BUCKET: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}"
          STAGE_DOCUMENTS_S3_BUCKET: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}"
          ENABLE_PUBLIC_URLS: !Sub "${EnablePublicUrls}"
          FORMKIQ_TYPE: !Ref FormKiQType
      Role: !GetAtt [DocumentsApiRequestsRole, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  DocumentsApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - DocumentsIamApi
      - DocumentsApiRequests
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DocumentsApiRequests
      Principal: apigateway.amazonaws.com
  DocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DocumentsHttpApi
      AutoDeploy: true
      Description: !Sub "Documents API ${AppEnvironment}"
      StageName: "$default"
  IamDocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DocumentsIamApi
      AutoDeploy: true
      Description: !Sub "Documents IAM API ${AppEnvironment}"
      StageName: "$default"
  DocumentsHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title:
            Fn::Sub: "FormKiQ HTTP API - ${AppEnvironment}"
          description: "FormKiQ HTTP API"
          version: "1.4.7"
        paths:
          /version:
            get:
              description: Return the version of FormKiQ.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Version"
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Return the version of FormKiQ Options.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /sites:
            get:
              description: Sites User belongs to
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Sites"
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Sites User belongs to Options.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents:
            get:
              tags:
                - Documents
              description: Returns a list of documents in reverse inserted date order.
              parameters:
                - name: "date"
                  in: "query"
                  schema:
                    type: "string"
                - name: "limit"
                  in: "query"
                  schema:
                    type: "string"
                - name: "tz"
                  in: "query"
                  schema:
                    type: "string"
                - name: "next"
                  in: "query"
                  schema:
                    type: "string"
                - name: "previous"
                  in: "query"
                  schema:
                    type: "string"
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/DocumentItemsResults"
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Save document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "201":
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentPostResponse'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
            options:
              description: Save document Options.
              tags:
                - Documents
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}:
            get:
              description: Get document details.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItem'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            patch:
              description: Update document details.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentPostResponse'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document details Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/versions:
            get:
              description: Get document versions.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - name: "tz"
                  in: "query"
                  schema:
                    type: "string"
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsVersions'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document versions Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/content:
            get:
              description: Get document content.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/versionIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                    Location:
                      $ref: '#/components/headers/Location'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentContent'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/tags:
            get:
              description: Get document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
                - name: previous
                  in: query
                  description: Previous Page Token.
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: The number of results to return.
                  schema:
                    type: string
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsTags'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Add Tag to document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentItemTag'
                    examples:
                      Add_Key_Only_Tag:
                        value:
                          key: category
                      Add_Key_and_Value_Tag:
                        value:
                          key: category
                          value: person
              responses:
                "201":
                  $ref: '#/components/responses/200Cors'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}/tags/{tagKey}:
            get:
              description: Get document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemTag'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            put:
              description: Replace Tag value.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentItemTagValueBody'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Delete document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/url:
            get:
              description: Returns a URL to fetch the document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/versionIdParam'
                - $ref: '#/components/parameters/durationParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Returns a URL to fetch the document Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/upload:
            get:
              description: Returns URL that can accept uploads largers than 5 MB.
              tags:
                - Documents
              parameters:
                - name: path
                  in: query
                  description: The upload file's path.
                  schema:
                    type: string
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/contentLengthParam'
                - $ref: '#/components/parameters/durationParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Returns URL that can accept uploads largers than 5 MB Options.
              tags:
                - Documents
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/upload:
            get:
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/contentLengthParam'
                - $ref: '#/components/parameters/durationParam'
              description: Returns URL to upload content larger than 5 MB.
              tags:
                - Documents
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              description: Searches for Documents Options.
              tags:
                - Documents
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /search:
            options:
              description: Searches for Documents Options.
              tags:
                - Search
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Searches for Documents.
              tags:
                - Search
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
                - name: previous
                  in: query
                  description: Previous Page Token.
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: The number of results to return.
                  schema:
                    type: string
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentSearchBody'
                    examples:
                      Search_By_Key:
                        value:
                          query:
                            tag:
                              key: category
                      Search_By_Value:
                        value:
                          query:
                            tag:
                              key: category
                              eq: person
                      Tag_Value_Begins_With:
                        value:
                          query:
                            tag:
                              key: firstname
                              beginsWith: jo
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsResults'
              security:
                - AuthorizationCognito: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /public/documents:
            post:
              description: Save document.
              tags:
                - Public
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "201":
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentId'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
            options:
              description: Save document Options.
              tags:
                - Public
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
        components:
          headers:
            AccessControlAllowOrigin:
              schema:
                type: string
            AccessControlAllowMethods:
              schema:
                type: string
            AccessControlAllowHeaders:
              schema:
                type: string
            Location:
              schema:
                type: string
          responses:
            200Cors:
              description: Options Response.
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          parameters:
            versionIdParam:
              name: versionId
              in: query
              description: Version Identifier
              required: false
              schema:
                type: string
            siteIdParam:
              name: siteId
              in: query
              description: Site Identifier.
              required: false
              schema:
                type: string
            documentIdParam:
              name: documentId
              in: path
              description: Document Identifier.
              required: true
              schema:
                type: string
            tagkeyParam:
              name: tagKey
              in: path
              description: Tag Key.
              required: true
              schema:
                type: string
            contentLengthParam:
              name: contentLength
              in: query
              description: Indicates the size of the entity-body.
              required: false
              schema:
                type: integer
            durationParam:
              name: duration
              in: query
              description: Indicates the number of hours request is valid for.
              required: true
              schema:
                type: integer
          schemas:
            DocumentItemTagValueBody:
              required:
                - "value"
              type: "object"
              properties:
                value:
                  type: "string"
            DocumentContent:
              type: "object"
              properties:
                content:
                  type: "string"
                contentUrl:
                  type: "string"
                contentType:
                  type: "string"
                isBase64:
                  type: "boolean"
            DocumentItemsVersions:
              type: "object"
              properties:
                next:
                  type: "string"
                versions:
                  $ref: "#/components/schemas/DocumentItemVersions"
            DocumentItemsTags:
              type: "object"
              properties:
                next:
                  type: "string"
                previous:
                  type: "string"
                tags:
                  $ref: "#/components/schemas/DocumentItemTags"
            DocumentItemTags:
              type: "array"
              items:
                $ref: "#/components/schemas/DocumentItemTag"
            DocumentItemVersions:
              type: "array"
              items:
                $ref: "#/components/schemas/DocumentItemVersion"
            DocumentSearchTag:
              required:
                - "tag"
              type: "object"
              properties:
                tag:
                  $ref: "#/components/schemas/DocumentSearchItemTag"
            DocumentId:
              required:
                - "documentId"
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                siteId:
                  type: "string"
            DocumentPostResponse:
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                siteId:
                  type: "string"
                uploadUrl:
                  type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      documentId:
                        type: "string"
                      uploadUrl:
                        type: "string"
            DocumentUrl:
              type: "object"
              properties:
                documentId:
                  type: "string"
                url:
                  type: "string"
            DocumentItem:
              required:
                - "documentId"
                - "path"
              type: "object"
              properties:
                siteId:
                  type: "string"
                path:
                  type: "string"
                insertedDate:
                  type: "string"
                  format: "date-time"
                checksum:
                  type: "string"
                documentId:
                  type: "string"
                  format: "uuid"
                contentType:
                  type: "string"
                userId:
                  type: "string"
                contentLength:
                  type: "integer"
                versionId:
                  type: "string"
                belongsToDocumentId:
                  type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      documentId:
                        type: "string"
            DocumentSearchBody:
              required:
                - "query"
              type: "object"
              properties:
                query:
                  $ref: "#/components/schemas/DocumentSearchTag"
            DocumentSearchItemTag:
              required:
                - "key"
              type: "object"
              properties:
                beginsWith:
                  type: "string"
                eq:
                  type: "string"
                key:
                  type: "string"
            DocumentBody:
              required:
                - "content"
              type: "object"
              properties:
                path:
                  type: "string"
                contentType:
                  type: "string"
                isBase64:
                  type: "boolean"
                content:
                  type: "string"
                tags:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      key:
                        type: "string"
                      value:
                        type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                      contentType:
                        type: "string"
                      isBase64:
                        type: "boolean"
                      content:
                        type: "string"
                      tags:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            key:
                              type: "string"
                            value:
                              type: "string"
            DocumentItemVersion:
              required:
                - "versionId"
              type: "object"
              properties:
                versionId:
                  type: "string"
                lastModifiedDate:
                  type: "string"
            DocumentItemTag:
              required:
                - "key"
                - "value"
              type: "object"
              properties:
                insertedDate:
                  type: "string"
                documentId:
                  type: "string"
                type:
                  type: "string"
                userId:
                  type: "string"
                value:
                  type: "string"
                key:
                  type: "string"
            DocumentItemsResults:
              type: "object"
              properties:
                next:
                  type: "string"
                previous:
                  type: "string"
                documents:
                  $ref: "#/components/schemas/DocumentItems"
            DocumentItems:
              type: "array"
              items:
                type: "object"
                properties:
                  siteId:
                    type: "string"
                  path:
                    type: "string"
                  insertedDate:
                    type: "string"
                    format: "date-time"
                  checksum:
                    type: "string"
                  documentId:
                    type: "string"
                    format: "uuid"
                  contentType:
                    type: "string"
                  userId:
                    type: "string"
                  contentLength:
                    type: "integer"
                  versionId:
                    type: "string"
            Version:
              type: object
              properties:
                version:
                  type: string
                type:
                  type: string
            Sites:
              type: object
              properties:
                sites:
                  $ref: "#/components/schemas/SitesList"
            SitesList:
              type: "array"
              items:
                $ref: "#/components/schemas/Site"
            Site:
              type: "object"
              properties:
                siteId:
                  type: "string"
                uploadEmail:
                  type: "string"
          securitySchemes:
            AuthorizationCognito:
              type: oauth2
              x-amazon-apigateway-authorizer:
                type: jwt
                jwtConfiguration:
                  issuer:
                    Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
                  audience:
                    - Fn::Sub: "${CognitoUserPoolClient}"
                identitySource: "$request.header.Authorization"
            sigv4:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "awsSigv4"
          x-amazon-apigateway-integrations:
            lambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            lambdaApi201:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "201"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                    method.response.header.Access-Control-Allow-Methods: '''*'''
                    method.response.header.Access-Control-Allow-Origin: '''*'''
              passthroughBehavior: WHEN_NO_TEMPLATES
              httpMethod: POST
              type: aws_proxy
              payloadFormatVersion: "1.0"
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        x-amazon-apigateway-cors:
          allowOrigins:
            - "*"
          maxAge: 3600
          allowMethods:
            - "*"
          allowHeaders:
            - "*"
        tags:
          - name: Application
            x-amazon-apigateway-tag-value: "FormKiQ Core"
          - name: AppEnvironment
            x-amazon-apigateway-tag-value:
              Fn::Sub: "${AppEnvironment}"
  DocumentsIamApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title:
            Fn::Sub: "FormKiQ IAM API - ${AppEnvironment}"
          description: "FormKiQ IAM API"
          version: "1.4.7"
        paths:
          /version:
            get:
              description: Return the version of FormKiQ.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Version"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Return the version of FormKiQ Options.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /sites:
            get:
              description: Sites User belongs to
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Sites"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Sites User belongs to Options.
              tags:
                - Miscellaneous
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents:
            get:
              tags:
                - Documents
              description: Returns a list of documents in reverse inserted date order.
              parameters:
                - name: "date"
                  in: "query"
                  schema:
                    type: "string"
                - name: "limit"
                  in: "query"
                  schema:
                    type: "string"
                - name: "tz"
                  in: "query"
                  schema:
                    type: "string"
                - name: "next"
                  in: "query"
                  schema:
                    type: "string"
                - name: "previous"
                  in: "query"
                  schema:
                    type: "string"
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/DocumentItemsResults"
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Save document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "201":
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentPostResponse'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
            options:
              description: Save document Options.
              tags:
                - Documents
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}:
            get:
              description: Get document details.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItem'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            patch:
              description: Update document details.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentPostResponse'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document details Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/versions:
            get:
              description: Get document versions.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - name: "tz"
                  in: "query"
                  schema:
                    type: "string"
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsVersions'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document versions Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/content:
            get:
              description: Get document content.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/versionIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                    Location:
                      $ref: '#/components/headers/Location'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentContent'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/tags:
            get:
              description: Get document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
                - name: previous
                  in: query
                  description: Previous Page Token.
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: The number of results to return.
                  schema:
                    type: string
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsTags'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Get document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Add Tag to document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentItemTag'
                    examples:
                      Add_Key_Only_Tag:
                        value:
                          key: category
                      Add_Key_and_Value_Tag:
                        value:
                          key: category
                          value: person
              responses:
                "201":
                  $ref: '#/components/responses/200Cors'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}/tags/{tagKey}:
            get:
              description: Get document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemTag'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            put:
              description: Replace Tag value.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentItemTagValueBody'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Delete document tags Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete document tags.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/tagkeyParam'
                - $ref: '#/components/parameters/siteIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/url:
            get:
              description: Returns a URL to fetch the document.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/versionIdParam'
                - $ref: '#/components/parameters/durationParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Returns a URL to fetch the document Options.
              tags:
                - Documents
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/upload:
            get:
              description: Returns URL that can accept uploads largers than 5 MB.
              tags:
                - Documents
              parameters:
                - name: path
                  in: query
                  description: The upload file's path.
                  schema:
                    type: string
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/contentLengthParam'
                - $ref: '#/components/parameters/durationParam'
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              description: Returns URL that can accept uploads largers than 5 MB Options.
              tags:
                - Documents
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/upload:
            get:
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/contentLengthParam'
                - $ref: '#/components/parameters/durationParam'
              description: Returns URL to upload content larger than 5 MB.
              tags:
                - Documents
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentUrl'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            options:
              parameters:
                - $ref: '#/components/parameters/documentIdParam'
              description: Searches for Documents Options.
              tags:
                - Documents
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /search:
            options:
              description: Searches for Documents Options.
              tags:
                - Search
              responses:
                "200":
                  $ref: '#/components/responses/200Cors'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Searches for Documents.
              tags:
                - Search
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
                - name: next
                  in: query
                  description: Next Page Token.
                  schema:
                    type: string
                - name: previous
                  in: query
                  description: Previous Page Token.
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: The number of results to return.
                  schema:
                    type: string
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentSearchBody'
                    examples:
                      Search_By_Key:
                        value:
                          query:
                            tag:
                              key: category
                      Search_By_Value:
                        value:
                          query:
                            tag:
                              key: category
                              eq: person
                      Tag_Value_Begins_With:
                        value:
                          query:
                            tag:
                              key: firstname
                              beginsWith: jo
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentItemsResults'
              security:
                - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /public/documents:
            post:
              description: Save document.
              tags:
                - Public
              parameters:
                - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentBody'
              responses:
                "201":
                  description: 201 response
                  headers:
                    Access-Control-Allow-Origin:
                      $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                      $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentId'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
            options:
              description: Save document Options.
              tags:
                - Public
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
        components:
          headers:
            AccessControlAllowOrigin:
              schema:
                type: string
            AccessControlAllowMethods:
              schema:
                type: string
            AccessControlAllowHeaders:
              schema:
                type: string
            Location:
              schema:
                type: string
          responses:
            200Cors:
              description: Options Response.
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          parameters:
            versionIdParam:
              name: versionId
              in: query
              description: Version Identifier
              required: false
              schema:
                type: string
            siteIdParam:
              name: siteId
              in: query
              description: Site Identifier.
              required: false
              schema:
                type: string
            documentIdParam:
              name: documentId
              in: path
              description: Document Identifier.
              required: true
              schema:
                type: string
            tagkeyParam:
              name: tagKey
              in: path
              description: Tag Key.
              required: true
              schema:
                type: string
            contentLengthParam:
              name: contentLength
              in: query
              description: Indicates the size of the entity-body.
              required: false
              schema:
                type: integer
            durationParam:
              name: duration
              in: query
              description: Indicates the number of hours request is valid for.
              required: true
              schema:
                type: integer
          schemas:
            DocumentItemTagValueBody:
              required:
                - "value"
              type: "object"
              properties:
                value:
                  type: "string"
            DocumentContent:
              type: "object"
              properties:
                content:
                  type: "string"
                contentUrl:
                  type: "string"
                contentType:
                  type: "string"
                isBase64:
                  type: "boolean"
            DocumentItemsVersions:
              type: "object"
              properties:
                next:
                  type: "string"
                versions:
                  $ref: "#/components/schemas/DocumentItemVersions"
            DocumentItemsTags:
              type: "object"
              properties:
                next:
                  type: "string"
                previous:
                  type: "string"
                tags:
                  $ref: "#/components/schemas/DocumentItemTags"
            DocumentItemTags:
              type: "array"
              items:
                $ref: "#/components/schemas/DocumentItemTag"
            DocumentItemVersions:
              type: "array"
              items:
                $ref: "#/components/schemas/DocumentItemVersion"
            DocumentSearchTag:
              required:
                - "tag"
              type: "object"
              properties:
                tag:
                  $ref: "#/components/schemas/DocumentSearchItemTag"
            DocumentId:
              required:
                - "documentId"
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                siteId:
                  type: "string"
            DocumentPostResponse:
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                siteId:
                  type: "string"
                uploadUrl:
                  type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      documentId:
                        type: "string"
                      uploadUrl:
                        type: "string"
            DocumentUrl:
              type: "object"
              properties:
                documentId:
                  type: "string"
                url:
                  type: "string"
            DocumentItem:
              required:
                - "documentId"
                - "path"
              type: "object"
              properties:
                siteId:
                  type: "string"
                path:
                  type: "string"
                insertedDate:
                  type: "string"
                  format: "date-time"
                checksum:
                  type: "string"
                documentId:
                  type: "string"
                  format: "uuid"
                contentType:
                  type: "string"
                userId:
                  type: "string"
                contentLength:
                  type: "integer"
                versionId:
                  type: "string"
                belongsToDocumentId:
                  type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      documentId:
                        type: "string"
            DocumentSearchBody:
              required:
                - "query"
              type: "object"
              properties:
                query:
                  $ref: "#/components/schemas/DocumentSearchTag"
            DocumentSearchItemTag:
              required:
                - "key"
              type: "object"
              properties:
                beginsWith:
                  type: "string"
                eq:
                  type: "string"
                key:
                  type: "string"
            DocumentBody:
              required:
                - "content"
              type: "object"
              properties:
                path:
                  type: "string"
                contentType:
                  type: "string"
                isBase64:
                  type: "boolean"
                content:
                  type: "string"
                tags:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      key:
                        type: "string"
                      value:
                        type: "string"
                documents:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                      contentType:
                        type: "string"
                      isBase64:
                        type: "boolean"
                      content:
                        type: "string"
                      tags:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            key:
                              type: "string"
                            value:
                              type: "string"
            DocumentItemVersion:
              required:
                - "versionId"
              type: "object"
              properties:
                versionId:
                  type: "string"
                lastModifiedDate:
                  type: "string"
            DocumentItemTag:
              required:
                - "key"
                - "value"
              type: "object"
              properties:
                insertedDate:
                  type: "string"
                documentId:
                  type: "string"
                type:
                  type: "string"
                userId:
                  type: "string"
                value:
                  type: "string"
                key:
                  type: "string"
            DocumentItemsResults:
              type: "object"
              properties:
                next:
                  type: "string"
                previous:
                  type: "string"
                documents:
                  $ref: "#/components/schemas/DocumentItems"
            DocumentItems:
              type: "array"
              items:
                type: "object"
                properties:
                  siteId:
                    type: "string"
                  path:
                    type: "string"
                  insertedDate:
                    type: "string"
                    format: "date-time"
                  checksum:
                    type: "string"
                  documentId:
                    type: "string"
                    format: "uuid"
                  contentType:
                    type: "string"
                  userId:
                    type: "string"
                  contentLength:
                    type: "integer"
                  versionId:
                    type: "string"
            Version:
              type: object
              properties:
                version:
                  type: string
                type:
                  type: string
            Sites:
              type: object
              properties:
                sites:
                  $ref: "#/components/schemas/SitesList"
            SitesList:
              type: "array"
              items:
                $ref: "#/components/schemas/Site"
            Site:
              type: "object"
              properties:
                siteId:
                  type: "string"
                uploadEmail:
                  type: "string"
          securitySchemes:
            AuthorizationCognito:
              type: oauth2
              x-amazon-apigateway-authorizer:
                type: jwt
                jwtConfiguration:
                  issuer:
                    Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
                  audience:
                    - Fn::Sub: "${CognitoUserPoolClient}"
                identitySource: "$request.header.Authorization"
            sigv4:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "awsSigv4"
          x-amazon-apigateway-integrations:
            lambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            lambdaApi201:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "201"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                    method.response.header.Access-Control-Allow-Methods: '''*'''
                    method.response.header.Access-Control-Allow-Origin: '''*'''
              passthroughBehavior: WHEN_NO_TEMPLATES
              httpMethod: POST
              type: aws_proxy
              payloadFormatVersion: "1.0"
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        x-amazon-apigateway-cors:
          allowOrigins:
            - "*"
          maxAge: 3600
          allowMethods:
            - "*"
          allowHeaders:
            - "*"
        tags:
          - name: Application
            x-amazon-apigateway-tag-value: "FormKiQ"
          - name: AppEnvironment
            x-amazon-apigateway-tag-value:
              Fn::Sub: "${AppEnvironment}"
  DocumentsHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses Cognito authorization"
      Name: !Sub "/formkiq/${AppEnvironment}/api/DocumentsHttpUrl"
      Type: String
      Value: !Sub "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  DocumentsApiRequestsRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: apigatewaylambdarole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${Bucket}'
                    - {Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}"}
                  - !Sub
                    - 'arn:aws:s3:::${Bucket}/*'
                    - {Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}"}
                  - !Sub
                    - 'arn:aws:s3:::${Bucket}'
                    - {Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}"}
                  - !Sub
                    - 'arn:aws:s3:::${Bucket}/*'
                    - {Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}"}
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}/index/*"
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Put*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName:1}}"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:formkiq*"
  DocumentsIamApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses IAM authorization"
      Name: !Sub "/formkiq/${AppEnvironment}/api/DocumentsIamUrl"
      Type: String
      Value: !Sub "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  DocumentsApiRequestsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing API Requests"
      Name: !Sub "/formkiq/${AppEnvironment}/lambda/DocumentsApiRequests"
      Type: String
      Value: !Ref DocumentsApiRequests
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt [CloudWatchRole, Arn]
  ApiGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
  ApiGatewayInvokeGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
  ApiGatewayInvokeGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroup"
      Type: String
      Value: !Ref ApiGatewayInvokeGroup
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  ApiGatewayInvokeGroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group Arn that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroupArn"
      Type: String
      Value: !GetAtt [ApiGatewayInvokeGroup, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  ApiGatewayInvokeRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRole"
      Type: String
      Value: !Ref ApiGatewayInvokeRole
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  ApiGatewayInvokeRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role Arn that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRoleArn"
      Type: String
      Value: !GetAtt [ApiGatewayInvokeRole, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn:
      - CognitoCustomMessage
    Properties:
      UserPoolName: !Sub "${AWS::StackName} - ${AppEnvironment}"
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: !Sub "${PasswordMinimumLength}"
          RequireLowercase: !Sub "${PasswordRequireLowercase}"
          RequireNumbers: !Sub "${PasswordRequireNumbers}"
          RequireSymbols: !Sub "${PasswordRequireSymbols}"
          RequireUppercase: !Sub "${PasswordRequireUppercase}"
      LambdaConfig:
        CustomMessage: !GetAtt CognitoCustomMessage.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Sub "${AllowAdminCreateUserOnly}"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolTags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ DocumentStack"
        StackName: !Sub "${AWS::StackName}"
  AdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Precedence: 0
      GroupName: "Admins"
      RoleArn: !GetAtt AdminGroupRole.Arn
      UserPoolId: !Ref CognitoUserPool
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-IdentityPool"
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false
  AdminGroupRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                  - "authenticated"
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-AdminGroupRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["cognito-idp:AdminAddUserToGroup", "cognito-idp:AdminConfirmSignUp", "cognito-idp:AdminCreateUser", "cognito-idp:AdminDeleteUser", "cognito-idp:AdminListGroupsForUser", "cognito-idp:AdminRemoveUserFromGroup", "cognito-idp:AdminResetUserPassword", "cognito-idp:ListUsers", "cognito-idp:ListUsersInGroup"]
                Resource: !GetAtt CognitoUserPool.Arn
  DefaultGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Precedence: 0
      GroupName: "default"
      UserPoolId: !Ref CognitoUserPool
  DefaultReadGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      Precedence: 0
      GroupName: "default_read"
      UserPoolId: !Ref CognitoUserPool
  CognitoNoAccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                  - "authenticated"
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-CognitoNoAccessRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Deny"
                Action: ["*"]
                Resource: "*"
  # Creates a User Pool Client to be used by the identity pool
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
  CognitoIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      RoleMappings:
        cognitoProvider:
          IdentityProvider: !Join ["", ["cognito-idp.", !Sub "${AWS::Region}", ".amazonaws.com/", !Ref CognitoUserPool, ":", !Ref CognitoUserPoolClient]]
          Type: Token
          AmbiguousRoleResolution: Deny
      Roles:
        authenticated: !GetAtt CognitoNoAccessRole.Arn
        unauthenticated: !GetAtt CognitoNoAccessRole.Arn
  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolId"
      Type: String
      Value: !Ref CognitoUserPool
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoUserPoolArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Arn"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolArn"
      Type: String
      Value: !GetAtt CognitoUserPool.Arn
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoUserPoolProviderUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider URL"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderUrl"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderURL
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoUserPoolProviderNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider Name"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderName"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderName
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoUserPoolClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Client"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolClientId"
      Type: String
      Value: !Ref CognitoUserPoolClient
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoIdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Identity Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/IdentityPoolId"
      Type: String
      Value: !Ref CognitoIdentityPool
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  AdminGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/AdminGroup"
      Type: String
      Value: !Ref AdminGroup
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
  CognitoCustomMessage:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CognitoCustomMessageRole.Arn
      Runtime: nodejs10.x
      CodeUri: ../lambda-cognito-user-signup/build/distributions/cognito-user-signup.zip
      Environment:
        Variables:
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
      Tags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: !Sub "FormKiQ ${FormKiQType}"
        StackName: !Sub "${AWS::StackName}"
  CognitoCustomMessageRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-CognitoCustomMessageRole"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
  CognitoCustomMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - CognitoCustomMessage
      - CognitoUserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoCustomMessage
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
Outputs:
  ApiGatewayInvokeRole:
    Description: "API Gateway Role that allows invoking of endpoints"
    Value: !Ref ApiGatewayInvokeRole
  ApiGatewayInvokeRoleArn:
    Description: "API Gateway Role Arn that allows invoking of endpoints"
    Value: !GetAtt [ApiGatewayInvokeRole, Arn]
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group that allows invoking of endpoints"
    Value: !Ref ApiGatewayInvokeGroup
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group ARN that allows invoking of endpoints"
    Value: !GetAtt [ApiGatewayInvokeGroup, Arn]
  DocumentsApiRequests:
    Description: "FormKiQ Api Request Handler"
    Value: !Ref DocumentsApiRequests
  DocumentsIamApiUrl:
    Description: "The endpoint url for the IAM API"
    Value: !Sub "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
  DocumentsHttpApiUrl:
    Description: "The endpoint url for the Http API"
    Value: !Sub "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  CognitoUserPoolId:
    Description: "Cognito User Pool"
    Value: !Ref CognitoUserPool
  CognitoUserPoolArn:
    Description: "Cognito User Pool Arn"
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolProviderUrl:
    Description: "Cognito User Pool Provider URL"
    Value: !GetAtt CognitoUserPool.ProviderURL
  CognitoUserPoolProviderName:
    Description: "Cognito User Pool Provider Name"
    Value: !GetAtt CognitoUserPool.ProviderName
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool"
    Value: !Ref CognitoIdentityPool
  CognitoAdminGroup:
    Description: "FormKiQ Cognito Admin Group"
    Value: !Ref AdminGroup
