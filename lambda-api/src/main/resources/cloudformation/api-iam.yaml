#@ load("@ytt:overlay", "overlay")

#@overlay/match by=overlay.all
---
Resources:

  #@overlay/match missing_ok=True
  DocumentsIamApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        openapi: "3.0.1"
        info:
          title:
            Fn::Sub: "${AWS::StackName} IAM API - ${AppEnvironment}"
          description: "FormKiQ IAM API"
          version: "1.8.9"
        paths:
          /version:
            get:
              description: Return the version of FormKiQ
              tags:
              - Miscellaneous
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetVersionRequest"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /sites:
            get:
              description: Returns the list of sites that the user has access to
              tags:
              - Miscellaneous
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetSitesRequest"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /tagSchemas:
            get:
              description: Returns the list of tagSchemas; ONLY available in FormKiQ Enterprise
              tags:
              - Enterprise TagSchema
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/limitParam'
              - name: "next"
                in: "query"
                description: "Next page of results token"
                schema:
                  type: "string"
              - name: "previous"
                in: "query"
                description: "Previous page of results token"
                schema:
                  type: "string"
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetTagSchemasRequest"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Creates a new TagSchema; ONLY available in FormKiQ Enterprise
              tags:
              - Enterprise TagSchema
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddTagSchemaRequest'
              responses:
                '201':
                  description: 201 CREATED
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/TagSchemaPostResponse'
                '400':
                  description: 400 BAD REQUEST
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ErrorsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /tagSchemas/{tagSchemaId}:
            get:
              description: Retrieves a TagSchema's details, i.e., metadata; ONLY available in FormKiQ Enterprise
              tags:
              - Enterprise TagSchema
              parameters:
              - $ref: '#/components/parameters/tagSchemaIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetTagSchemaRequest'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete a TagSchema; ONLY available in FormKiQ Enterprise
              tags:
              - Enterprise TagSchema
              parameters:
              - $ref: '#/components/parameters/tagSchemaIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents:
            get:
              tags:
              - Documents
              description: Returns a list of the most recent documents added, ordered by inserted, descending
              parameters:
              - name: "date"
                in: "query"
                description: "Fetch documents inserted on a certain date (yyyy-MM-dd)"
                schema:
                  type: "string"
              - name: "tz"
                in: "query"
                description: "UTC offset to apply to date parameter (IE: -0600)"
                schema:
                  type: "string"
              - name: "next"
                in: "query"
                description: "Next page of results token"
                schema:
                  type: "string"
              - name: "previous"
                in: "query"
                description: "Previous page of results token"
                schema:
                  type: "string"
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/limitParam'
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetDocumentsResponse"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Creates a new document; body may include document content if less than 5 MB
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentRequest'
                    examples:
                      Simple_File:
                        value:
                          path: test.txt
                          contentType: text/plain
                          content: This is sample data file
                          tags:
                            - key: category, 
                              value: sample
                            - key: players, 
                              values: ["111", "222"]
                      Nested_Document:
                        value:
                          path: doc1.txt
                          contentType: text/plain
                          content: This is document1 content
                          tags:
                            - key: type
                              value: document1
                          documents:
                            contentType: text/plain,
                            content: This is sub document1 content,
                            tags:
                              - key: type
                                value: subdocument1
              responses:
                '201':
                  description: 201 CREATED
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}:
            get:
              description: Retrieves a document's details, i.e., metadata
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            patch:
              description: Update a document's details, i.e., metadata
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete a document
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/versions:
            get:
              description: Get a listing of document content versions
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              - name: next
                in: query
                description: "Next page of results token"
                schema:
                  type: string
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentVersionsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/content:
            get:
              description: Get a document's contents. text/*, application/json, application/x-www-form-urlencoded returns "content" field, all other content-types returns a 'contentUrl' for the content. 
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/versionIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                    Location:
                      $ref: '#/components/headers/Location'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentContentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/tags:
            get:
              description: Get a listing of a document's tags
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/limitParam'
              - name: next
                in: query
                description: "Next page of results token"
                schema:
                  type: string
              - name: previous
                in: query
                description: "Previous page of results token"
                schema:
                  type: string
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentTagsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Add a single tag to a document; endpoint also accepts a different body parameter for adding multiple tags at one time
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentTagRequest'
                    examples:
                      Add_Key_Only_Tag:
                        value:
                          key: category
                      Add_Key_and_Value_Tag:
                        value:
                          key: category
                          value: person
                      Add_Key_and_Values_Tag:
                        value:
                          key: category
                          values: [person,canadian]
              responses:
                '201':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}/tags#:
            post:
              description: Add multiple tags to a document; endpoint also accepts a different body parameter for adding a single tag
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentTagsRequest'
              responses:
                '201':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}/tags/{tagKey}:
            get:
              description: Get a document tag by using its key
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentTagResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            put:
              description: Update any and all values of a document tag, by using its key; you can supply one tag value or a list of tag values in the request body
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SetDocumentTagKeyRequest'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Delete a document tag by using its key
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/tags/{tagKey}/{tagValue}:
            delete:
              description: Delete a specific document tag's key/value combination; the request will be ignored if there is no valid key/value combination found
              tags:
              - Document Tags
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'
              - $ref: '#/components/parameters/tagvalueParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/url:
            get:
              description: Returns a URL for the document's contents that expires (default is 48 hours)
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/versionIdParam'
              - $ref: '#/components/parameters/durationParam'
              - name: "inline"
                in: "query"
                description: "Set the Content-Disposition to inline"
                schema:
                  type: boolean
                  default: false
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentUrlRequest'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/upload:
            get:
              description: Returns a URL that can be used to upload document content and create a new document; required to add content that is larger than 5 MB
              tags:
              - Documents
              parameters:
                - name: path
                  in: query
                  description: The upload file's path
                  schema:
                    type: string
                - $ref: '#/components/parameters/siteIdParam'
                - $ref: '#/components/parameters/contentLengthParam'
                - $ref: '#/components/parameters/durationParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentUrlRequest'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Returns a URL that can be used to upload document content and create a new document; required to add content that is larger than 5 MB
              tags:
              - Documents
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/durationParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentUploadRequest'
              responses:
                '201':
                  description: 201 CREATED
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /documents/{documentId}/upload:
            get:
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/contentLengthParam'
              - $ref: '#/components/parameters/durationParam'
              description: Returns a URL that can be used to upload documents for a specific documentId (required for documents larger than 5 MB)
              tags:
              - Documents
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentUrlRequest'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /search:
            post:
              description: Document search query request; documents are searched primarily using a document tag key and optional tag value, while an optional documentIds parameter is also available in the DocumentSearchBody to filter within up to 100 documentIds
              tags:
              - Document Search
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/limitParam'
              - name: next
                in: query
                description: "Next page of results token"
                schema:
                  type: string
              - name: previous
                in: query
                description: "Previous page of results token"
                schema:
                  type: string
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentSearchRequest'
                    examples:
                      Search_By_Key:
                        value:
                          query:
                            tag:
                              key: category
                      Search_By_Value:
                        value:
                          query:
                            tag:
                              key: category
                              eq: person
                      Tag_Value_Begins_With:
                        value:
                          query:
                            tag:
                              key: firstname
                              beginsWith: jo
                      Search_By_Value_for_Specific_Documents:
                        value:
                          query:
                            tag:
                              key: category
                              eq: person
                            documentIds: ["1", "2"]
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentSearchResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /searchFulltext:
            post:
              description: Document full text search (and more robust multi-tag search queries, powered by OpenSearch) ONLY available with FormKiQ Enterprise
              tags:
              - Document Search
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/limitParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DocumentFulltextRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentFulltextResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
          /queryFulltext:
            post:
              description: Endpoint for allowing custom, complex queries using the OpenSearch search API (https://opensearch.org/docs/latest/opensearch/rest-api/search/) ONLY available with FormKiQ Enterprise
              tags:
              - Document Search
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/QueryFulltextRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/QueryFulltextResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"                
          /documents/{documentId}/actions:
            get:
              description: Get Document Actions and their Status
              tags:
              - Document Actions
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentActionsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Add action to a document
              tags:
              - Document Actions
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentActionsRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentActionsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /documents/{documentId}/ocr:
            get:
              description: Get Document optical character recognition (OCR) result; if exists. ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise OCR
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/contentUrlParam'
              - $ref: '#/components/parameters/textParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentOcrResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/ocrLambdaApi200"
            post:
              description: Document optical character recognition (OCR) request; extract text and data from a document. ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise OCR
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentOcrRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentOcrResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/ocrLambdaApi200"                        
            put:
              description: Sets a Document optical character recognition (OCR) document. ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise OCR
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SetDocumentOcrRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddDocumentOcrResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/ocrLambdaApi200"
            delete:
              description: Delete a Document optical character recognition (OCR) result; if exists. ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise OCR
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/ocrLambdaApi200"
          /documents/{documentId}/antivirus:                       
            put:
              description: Performs Antivirus scan on a document. ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Antivirus
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SetAntivirusRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/SetAntivirusResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/antivirusLambdaApi200"                
          /documents/{documentId}/fulltext:
            get:
              description: Retrieves an OpenSearch document's details, i.e., metadata
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetDocumentFulltextResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
            delete:
              description: Removes full text search for a document; ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
            put:
              description: Set all text/tags found within a document to OpenSearch; ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SetDocumentFulltextRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/SetDocumentFulltextResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
            patch:
              description: Updates Opensearch document; ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: false
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UpdateDocumentFulltextRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/SetDocumentFulltextResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
          /documents/{documentId}/fulltext/tags/{tagKey}:
            delete:
              description: Removes document tags from full text search; ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'              
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"
          /documents/{documentId}/fulltext/tags/{tagKey}/{tagValue}:
            delete:
              description: Removes document tag/value from full text search; ONLY available with FormKiQ Enterprise
              tags:
              - Enterprise Fulltext
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              - $ref: '#/components/parameters/tagkeyParam'
              - $ref: '#/components/parameters/tagvalueParam'              
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200"                
          /public/documents:
            post:
              description: Allows unauthenticated creation of new documents; must be enabled during installation (disabled by default)
              tags:
              - Public
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddDocumentRequest'
              responses:
                '201':
                  description: 201 CREATED
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentId'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /public/webhooks/{webhooks+}:
            post:
              description: Receives an incoming public post to a specified webhook and creates a document based on the data sent; must be enabled during installation (disabled by default)
              tags:
              - Public
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/webhooksParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentId'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /private/webhooks/{webhooks+}:
            post:
              description: Receives an incoming private webhook and creates a document based on the webhook's body; requires authentication
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/webhooksParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/DocumentId'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /webhooks:
            get:
              tags:
              - Webhooks
              description: Returns a list of webhooks; each webhook's id can be provided to an external service, allowing data to be sent, received, and processed via that webhook
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetWebhooksResponse"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Create a new webhook; once created, a webhook's id can be provided to an external service, allowing data to be sent, received, and processed via that webhook
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddWebhookRequest'
              responses:
                '201':
                  description: 201 CREATED
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/AddWebhookResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /webhooks/{webhookId}:
            get:
              tags:
              - Webhooks
              description: Returns a webhook's details, i.e., its metadata
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/webhookIdParam'
              responses:
                '200':
                  description: "200 OK"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/GetWebhookResponse"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            delete:
              description: Deletes a webhook; this will disable sending, receiving, or processing of data from external services to this webhook
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/webhookIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            patch:
              description: Updates a webhook's details, i.e., its metadata
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/webhookIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AddWebhookRequest'
              responses:
                '200':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
          /webhooks/{webhookId}/tags:
            get:
              description: Get a webhook's tags
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/webhookIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/GetWebhookTagsResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi200"
            post:
              description: Add a tag to a webhook
              tags:
              - Webhooks
              parameters:
              - $ref: '#/components/parameters/webhookIdParam'
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/GetDocumentTagResponse'
                    examples:
                      Add_Key_Only_Tag:
                        value:
                          key: category
                      Add_Key_and_Value_Tag:
                        value:
                          key: category
                          value: person
              responses:
                '201':
                  $ref: '#/components/responses/200Cors'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/lambdaApi201"
          /onlyoffice/{documentId}/edit:
            post:
              description: Provides OnlyOffice integration for editing Documents. ONLY available with FormKiQ Enterprise
              tags:
              - OnlyOffice
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/OnlyOfficeDocumentEditRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/OnlyOfficeDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200"
          /onlyoffice/new:
            post:
              description: Provides OnlyOffice integration for creation Documents. ONLY available with FormKiQ Enterprise
              tags:
              - OnlyOffice
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/OnlyOfficeDocumentNewRequest'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/OnlyOfficeDocumentResponse'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200"
          /onlyoffice/{documentId}/save:
            post:
              description: Saves Updated Documents for OnlyOffice integration. ONLY available with FormKiQ Enterprise
              tags:
              - OnlyOffice
              parameters:
              - $ref: '#/components/parameters/siteIdParam'
              - $ref: '#/components/parameters/documentIdParam'
              responses:
                '200':
                  description: 200 OK
                  headers:
                    Access-Control-Allow-Origin:
                       $ref: '#/components/headers/AccessControlAllowOrigin'
                    Access-Control-Allow-Methods:
                       $ref: '#/components/headers/AccessControlAllowMethods'
                    Access-Control-Allow-Headers:
                      $ref: '#/components/headers/AccessControlAllowHeaders'
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/OnlyOfficeDocumentSaveResponse'
              x-amazon-apigateway-integration:
                $ref: "#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200"
        components:
          headers:
            AccessControlAllowOrigin:
              schema:
                type: string
            AccessControlAllowMethods:
              schema:
                type: string
            AccessControlAllowHeaders:
              schema:
                type: string
            Location:
              schema:
                type: string
          responses:
            200Cors:
              description: 200 OK
              headers:
                Access-Control-Allow-Origin:
                  schema:
                    type: string
                Access-Control-Allow-Methods:
                  schema:
                    type: string
                Access-Control-Allow-Headers:
                  schema:
                    type: string
              content: {}
          parameters:
            versionIdParam:
              name: versionId
              in: query
              description: Version Identifier
              required: false
              schema:
                type: string
            webhooksParam:
              name: webhooks+
              in: path
              required: true
              description: Web Hook Param
              schema:
                type: string
            webhookIdParam:
              name: webhookId
              in: path
              required: true
              description: Web Hook Param
              schema:
                type: string
            siteIdParam:
              name: siteId
              in: query
              description: Site Identifier
              required: false
              schema:
                type: string
            limitParam:
              name: limit
              in: query
              description: Limit Results
              required: false
              schema:
                type: string
                default: "10"
            documentIdParam:
              name: documentId
              in: path
              description: Document Identifier
              required: true
              schema:
                type: string
            tagSchemaIdParam:
              name: tagSchemaId
              in: path
              description: Tag Schema Identifier
              required: true
              schema:
                type: string
            tagkeyParam:
              name: tagKey
              in: path
              description: Tag Key
              required: true
              schema:
                type: string
            tagvalueParam:
              name: tagValue
              in: path
              description: Tag Key Value
              required: true
              schema:
                type: string
            contentLengthParam:
              name: contentLength
              in: query
              description: Indicates the size of the entity-body
              required: false
              schema:
                type: integer
            durationParam:
              name: duration
              in: query
              description: Indicates the number of hours request is valid for
              schema:
                type: integer
            contentUrlParam:
              name: contentUrl
              in: query
              description: Whether to return a "contentUrl", set value to 'true'
              required: false
              schema:
                type: string
            textParam:
              name: text
              in: query
              description: Returns raw 'text' of OCR content. e.g. AWS Textract returns JSON, setting parameter to 'true' converts JSON to Text
              required: false
              schema:
                type: string
          schemas:
            SetDocumentTagKeyRequest:
              type: "object"
              properties:
                value:
                  type: "string"
                  description: "Tag value"
                values:
                  type: "array"
                  description: "Tag values"
                  items:
                    type: "string"
            GetDocumentContentResponse:
              type: "object"
              properties:
                content:
                  type: "string"
                  description: "Document content"
                contentUrl:
                  type: "string"
                  description: "Url to document content"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                isBase64:
                  type: "boolean"
                  description: "Is Content Base64 encoded"
            GetDocumentVersionsResponse:
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                versions:
                  $ref: "#/components/schemas/DocumentItemVersions"
            GetDocumentTagsResponse:
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                previous:
                  type: "string"
                  description: "Previous page of results token"
                tags:
                  $ref: "#/components/schemas/DocumentItemTags"
            DocumentItemTags:
              type: "array"
              description: "List of tags"
              items:
                $ref: "#/components/schemas/GetDocumentTagResponse"
            DocumentItemVersions:
              type: "array"
              description: "List of document versions"
              items:
                $ref: "#/components/schemas/DocumentItemVersion"
            DocumentSearchTag:
              required:
              - "tag"
              type: "object"
              description: "Document tag search criteria"
              properties:
                meta:
                  $ref: "#/components/schemas/DocumentSearchItemMeta"              
                tag:
                  $ref: "#/components/schemas/DocumentSearchItemTag"
                documentIds:
                  type: array
                  description: "List of DocumentIds to filter search results on"
                  items:
                    type: "string"
            DocumentId:
              required:
              - "documentId"
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                siteId:
                  type: "string"
                  description: "Site Identifier"
            AddWebhookResponse:
              type: "object"
              properties:
                id:
                  type: "string"
                  format: "uuid"
                siteId:
                  type: "string"
                  description: "Site Identifier"
            AddDocumentResponse:
              type: "object"
              properties:
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                siteId:
                  type: "string"
                  description: "Site Identifier"
                uploadUrl:
                  type: "string"
                  description: "Url to upload document to"
                documents:
                  $ref: "#/components/schemas/AddChildDocumentsResponse"
            AddChildDocumentsResponse:
              type: "array"
              description: "List of child documents"
              items:
                $ref: "#/components/schemas/AddChildDocumentResponse"
            AddChildDocumentResponse:
              type: "object"
              properties:
                documentId:
                  type: "string"
                  description: "Document Identifier"
                uploadUrl:
                  type: "string"
                  description: "Url to upload document to"
            GetDocumentUrlRequest:
              type: "object"
              properties:
                documentId:
                  type: "string"
                  description: "Document Identifier"
                url:
                  type: "string"
                  description: "Document content url"
            GetDocumentResponse:
              required:
              - "documentId"
              - "path"
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                previous:
                  type: "string"
                  description: "Previous page of results token"
                siteId:
                  type: "string"
                  description: "Site Identifier"
                path:
                  type: "string"
                  description: "Path or Name of document"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                lastModifiedDate:
                  type: "string"
                  format: "date-time"
                  description: "Last Modified Timestamp"
                checksum:
                  type: "string"
                  description: "Document checksum, changes when document file changes"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                userId:
                  type: "string"
                  description: "User who added document"
                contentLength:
                  type: "integer"
                  description: "Document size"
                versionId:
                  type: "string"
                  description: "Document version"
                belongsToDocumentId:
                  type: "string"
                  description: "Parent Document Identifier"
                documents:
                  type: "array"
                  description: "List of related documents"
                  items:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                        description: "Path or Name of document"
                      insertedDate:
                        type: "string"
                        format: "date-time"
                        description: "Inserted Timestamp"
                      lastModifiedDate:
                        type: "string"
                        format: "date-time"
                        description: "Last Modified Timestamp"
                      checksum:
                        type: "string"
                        description: "Document checksum, changes when document file changes"
                      documentId:
                        type: "string"
                        format: "uuid"
                        description: "Document Identifier"
                      contentType:
                        type: "string"
                        description: "Document Content-Type"
                      userId:
                        type: "string"
                        description: "User who added document"
                      contentLength:
                        type: "integer"
                        description: "Document size"
                      versionId:
                        type: "string"
                        description: "Document version"
                      belongsToDocumentId:
                        type: "string"
                        description: "Parent Document Identifier"
            DocumentFulltextRequest:
              required:
              - "query"
              type: "object"
              description: "Document full text search"
              properties:
                query:
                  $ref: "#/components/schemas/DocumentFulltextSearch"
                responseFields:
                  $ref: "#/components/schemas/SearchResponseFields"
            DocumentFulltextSearch:
              type: "object"
              description: "Document full text search criteria"
              properties:
                page:
                  type: "integer"
                  description: "Result page to return (starting at 1)"
                text:
                  type: "string"
                  description: "Full text search"
                tags:
                  $ref: "#/components/schemas/DocumentFulltextTags"
            DocumentFulltextTags:
              type: "array"
              description: "List of search tags"
              items:
                $ref: "#/components/schemas/DocumentFulltextTag"
            DocumentFulltextTag:
              required:
              - "key"
              type: "object"
              properties:
                eq:
                  type: "string"
                  description: "Searches for strings that eq"
                eqOr:
                  type: array
                  description: "Searches for ANY strings that eq"
                  items:
                    type: "string"
                key:
                  type: "string"
                  description: "Tag key to search"
            DocumentSearchRequest:
              required:
              - "query"
              type: "object"
              description: "Document search tag criteria"
              properties:
                query:
                  $ref: "#/components/schemas/DocumentSearchTag"
                responseFields:
                  $ref: "#/components/schemas/SearchResponseFields"
            SearchResponseFields:
              properties:
                tags:
                  type: "array"
                  items:
                    type: "string"
            DocumentSearchItemMeta:
              required:
              - "folder"
              type: "object"
              properties:
                folder:
                  type: "string"
                  description: "Searches for a folder"              
            DocumentSearchItemTag:
              required:
              - "key"
              type: "object"
              properties:
                beginsWith:
                  type: "string"
                  description: "Searches for strings that begin with"
                eq:
                  type: "string"
                  description: "Searches for strings that eq"
                eqOr:
                  type: array
                  description: "Searches for ANY strings that eq"
                  items:
                    type: "string"
                key:
                  type: "string"
                  description: "Tag key to search"
            AddWebhookRequest:
              required:
              - "name"
              type: "object"
              properties:
                name:
                  type: "string"
                  description: "Name of webhook"
                ttl:
                  type: "string"
                  description: "Webhook time to live (expiry)"
                enabled:
                  type: "string"
                  description: "Is webhook enabled"
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
            AddDocumentUploadRequest:
              required:
              - "content"
              type: "object"
              properties:
                tagSchemaId:
                  type: "string"
                  description: "Tag Schema Id"
                path:
                  type: "string"
                  description: "Path or Name of document"
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
                actions:
                  $ref: "#/components/schemas/AddActions"
            AddDocumentRequest:
              required:
              - "content"
              type: "object"
              properties:
                tagSchemaId:
                  type: "string"
                  description: "Tag Schema Id"
                path:
                  type: "string"
                  description: "Path or Name of document"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                isBase64:
                  type: "boolean"
                  description: "Is Content Base64 encoded"
                content:
                  type: "string"
                  description: "Document content"
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
                actions:
                  $ref: "#/components/schemas/AddActions"
                documents:
                  $ref: "#/components/schemas/AddChildDocumentRequest"
            AddDocumentTagsRequest:
              type: "object"
              description: "Add List of document tags"
              properties:
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
            AddDocumentTags:
              type: "array"
              description: "List of document tags"
              items:
                $ref: "#/components/schemas/AddDocumentTagRequest"
            AddDocumentTagRequest:
              required:
              - "key"
              type: "object"
              description: "List of Document Tags (use either 'value' or 'values' not both)"
              properties:
                key:
                  type: "string"
                  description: "Tag key"
                value:
                  type: "string"
                  description: "Tag value"
                values:
                  type: "array"
                  description: "Tag values"
                  items:
                    type: "string"
                    description: "Tag value"
            AddChildDocumentRequest:
              type: "array"
              description: "List of child documents"
              items:
                $ref: "#/components/schemas/AddChildDocument"
            AddChildDocument:
              required:
              - "content"
              type: "object"
              description: "List of related documents"
              properties:
                path:
                  type: "string"
                  description: "Path or Name of document"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                isBase64:
                  type: "boolean"
                  description: "Is Content Base64 encoded"
                content:
                  type: "string"
                  description: "Document content"
            DocumentItemVersion:
              required:
              - "versionId"
              type: "object"
              properties:
                versionId:
                  type: "string"
                  description: "Document version"
                lastModifiedDate:
                  type: "string"
                  description: "Last modified date"
            GetDocumentTagResponse:
              required:
              - "key"
              - "value"
              type: "object"
              properties:
                insertedDate:
                  type: "string"
                  description: "Inserted Timestamp"
                documentId:
                  type: "string"
                  description: "Document Identifier"
                type:
                  type: "string"
                  description: "Tag type"
                userId:
                  type: "string"
                  description: "User who added document"
                value:
                  type: "string"
                  description: "Tag value"
                values:
                  type: "array"
                  description: "Tag values"
                  items:
                    type: "string"
                    description: "Tag value"
                key:
                  type: "string"
                  description: "Tag key"
            QueryFulltextRequest:
              description: OpenSearch search API request (https://opensearch.org/docs/latest/opensearch/rest-api/search/)
              type: "object"
              example:
                query:
                  match:
                    title: "Wind"
            QueryFulltextResponse:
              type: "object"
              properties:
                result:
                  type: "object"
              example:
                result:
                  hits:
                    hits:
                    - _index: ""
                      _id: ""
                      _source:
                        documentId: ""
                        content: ""
            DocumentFulltextResponse:
              type: "object"
              properties:
                documents:
                  $ref: "#/components/schemas/FulltextSearchItems"
            FulltextSearchItems:
              type: "array"
              description: "List of search result documents"
              items:
                $ref: "#/components/schemas/FulltextSearchItem"
            FulltextSearchItem:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                path:
                  type: "string"
                  description: "Path or Name of document"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                createdBy:
                  type: "string"
                  description: "User who added document"
                tags:
                  type: "object"
            GetDocumentFulltextResponse:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                content:
                  type: "string"
                  description: "Content of document"
                path:
                  type: "string"
                  description: "Path or Name of document"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                createdBy:
                  type: "string"
                  description: "User who added document"
                tags:
                  type: "object"
            DocumentSearchResponse:
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                previous:
                  type: "string"
                  description: "Previous page of results token"
                documents:
                  $ref: "#/components/schemas/SearchDocumentItems"
            SearchDocumentItems:
              type: "array"
              description: "List of search result documents"
              items:
                $ref: "#/components/schemas/SearchDocumentItem"
            SearchDocumentItem:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                path:
                  type: "string"
                  description: "Path or Name of document"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                lastModifiedDate:
                  type: "string"
                  format: "date-time"
                  description: "Last Modified Timestamp"
                folder:
                  type: "boolean"
                  description: "Is Result a Document Folder"
                checksum:
                  type: "string"
                  description: "Document checksum, changes when document file changes"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                userId:
                  type: "string"
                  description: "User who added document"
                contentLength:
                  type: "integer"
                  description: "Document size"
                versionId:
                  type: "string"
                  description: "Document version"
                matchedTag:
                  $ref: "#/components/schemas/DocumentSearchMatchTag"
                tags:
                  type: "object"
            DocumentSearchMatchTag:
              type: "object"
              properties:
                key:
                  type: "string"
                  description: "Tag key"
                value:
                  type: "string"
                  description: "Tag value"
                type:
                  type: "string"
                  description: "Tag type"
            GetDocumentsResponse:
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                previous:
                  type: "string"
                  description: "Previous page of results token"
                documents:
                  $ref: "#/components/schemas/DocumentItemResults"
            DocumentItemResults:
              type: "array"
              description: "List of documents"
              items:
                $ref: "#/components/schemas/DocumentItemResult"
            DocumentItemResult:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                path:
                  type: "string"
                  description: "Path or Name of document"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                lastModifiedDate:
                  type: "string"
                  format: "date-time"
                  description: "Last Modified Timestamp"
                checksum:
                  type: "string"
                  description: "Document checksum, changes when document file changes"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                userId:
                  type: "string"
                  description: "User who added document"
                contentLength:
                  type: "integer"
                  description: "Document size"
                versionId:
                  type: "string"
                  description: "Document version"
            GetWebhooksResponse:
              type: "object"
              properties:
                webhooks:
                  $ref: "#/components/schemas/Webhooks"
            Webhooks:
              type: "array"
              description: "List of webhooks"
              items:
                $ref: "#/components/schemas/GetWebhookResponse"
            GetWebhookResponse:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                name:
                  type: "string"
                  description: "Webhook name"
                url:
                  type: "string"
                  description: "Webhook url"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                id:
                  type: "string"
                  format: "uuid"
                  description: "Webhook Identifier"
                userId:
                  type: "string"
                  description: "User who added document"
            GetWebhookTagsResponse:
              type: "object"
              properties:
                next:
                  type: "string"
                  description: "Next page of results token"
                previous:
                  type: "string"
                  description: "Previous page of results token"
                tags:
                  $ref: "#/components/schemas/WebhookTagsList"
            WebhookTagsList:
              type: "array"
              description: "List of webhook tags"
              items:
                $ref: "#/components/schemas/WebhookTag"
            WebhookTag:
              required:
              - "key"
              - "value"
              type: "object"
              properties:
                insertedDate:
                  type: "string"
                  description: "Inserted Timestamp"
                webhookId:
                  type: "string"
                  description: "Webhook Identifier"
                type:
                  type: "string"
                  description: "Tag type"
                userId:
                  type: "string"
                  description: "User who added document"
                value:
                  type: "string"
                  description: "Tag value"
                key:
                  type: "string"
                  description: "Tag key"
            GetDocumentActionsResponse:
              type: "object"
              properties:
                actions:
                  $ref: "#/components/schemas/DocumentActionList"
            DocumentActionList:
              type: "array"
              description: "List of document actions"
              items:
                $ref: "#/components/schemas/DocumentAction"
            DocumentAction:
              type: object
              properties:
                status:
                  type: string
                  description: Status of the Document Action
                type:
                  type: string
                  description: Type of Document Action
                userId:
                  type: "string"
                  description: "User who requested the Action"
                parameters:
                  type: "object"
                  description: Action parameters                      
            GetDocumentOcrResponse:
              type: object
              properties:
                data:
                  type: string
                  description: OCR text result
                ocrEngine:
                  type: string
                  description: The OCR technique used
                ocrStatus:
                  type: string
                  description: The status of the OCR request
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                isBase64:
                  type: "boolean"
                  description: "Is Content Base64 encoded"
                userId:
                  type: "string"
                  description: "User who requested the OCR"
                documentId:
                  type: "string"
                  format: "uuid"
                  description: "Document Identifier"
            AddDocumentActionsResponse:
              type: object
              properties:
                message:
                  type: string
                  description: Document Action message
            AddDocumentOcrResponse:
              type: object
              properties:
                message:
                  type: string
                  description: OCR processing message
            SetDocumentFulltextResponse:
              type: object
              properties:
                message:
                  type: string
                  description: Full text processing message
            SetDocumentFulltextRequest:
              type: object
              properties:
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                content:
                  type: "string"
                  description: "Document content"
                contentUrls:
                  type: "array"
                  items:
                    type: "string"
                  description: "Url which contains Document content"
                path:
                  type: "string"
                  description: "Path or Name of document"
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
            UpdateDocumentFulltextRequest:
              type: object
              properties:
                path:
                  type: "string"
                  description: "Path or Name of document"
                content:
                  type: "string"
                  description: "Document content"
                tags:
                  $ref: "#/components/schemas/AddDocumentTags"
            SetAntivirusRequest:
              type: object
            SetAntivirusResponse:
              type: object
              properties:
                message:
                  type: string
                  description: Antivirus processing message
            AddDocumentActionsRequest:
              type: object
              properties:
                actions:
                  $ref: "#/components/schemas/AddActions"
            AddActions:
              type: array
              description: "List of Actions"
              items:
                $ref: "#/components/schemas/AddAction"
            AddAction:
              type: object
              required:
                - type
              properties:
                type:
                  type: "string"
                  description: Type of Document Action
                  enum:
                    - OCR
                    - FULLTEXT
                    - ANTIVIRUS
                    - WEBHOOK
                parameters:
                  $ref: "#/components/schemas/AddActionParameters"
            AddActionParameters:
              type: "object"
              properties:
                ocrParseTypes:
                  type: "string"
                  description: "OCR Parse types - TEXT, FORMS, TABLES"
                addPdfDetectedCharactersAsText:
                  type: "boolean"
                  description: "OCR action for rewrite PDF document, converting any Image text to searchable text"
                url:
                  type: "string"
                  description: "Webhook action for the callback URL"
            AddDocumentOcrRequest:
              type: object
              example:
                parseTypes:
                  - TEXT
                  - FORMS
                  - TABLES
              properties:
                parseTypes:
                  type: "array"
                  description: "OCR Parse types - TEXT, FORMS, TABLES"
                  items:
                    type: "string"
                addPdfDetectedCharactersAsText:
                  type: "boolean"
                  description: "Rewrite PDF document, converting any Image text to searchable text"
            SetDocumentOcrRequest:
              required:
              - "content"
              type: "object"
              properties:
                contentType:
                  type: "string"
                  description: "Document Content-Type"
                isBase64:
                  type: "boolean"
                  description: "Is Content Base64 encoded"
                content:
                  type: "string"
                  description: "Document content"
            GetVersionRequest:
              type: object
              properties:
                version:
                  type: string
                  description: "FormKiQ version"
                type:
                  type: string
                  description: "FormKiQ type"
                modules:
                  type: array
                  description: "List of installed modules"
                  items:
                    type: "string"
            GetSitesRequest:
              type: object
              properties:
                sites:
                  $ref: "#/components/schemas/Sites"
            Sites:
              type: "array"
              description: "List of sites"
              items:
                $ref: "#/components/schemas/Site"
            Site:
              type: "object"
              properties:
                siteId:
                  type: "string"
                  description: "Site Identifier"
                uploadEmail:
                  type: "string"
                  description: "SiteId document upload email address"
            TagSchemaPostResponse:
              type: "object"
              properties:
                tagSchemaId:
                  type: "string"
                  format: "uuid"
                  description: "Tag Schema Identifier"
            ErrorsResponse:
              type: object
              properties:
                errors:
                  $ref: "#/components/schemas/ErrorsList"
            ErrorsList:
              type: "array"
              description: "List of errors"
              items:
                $ref: "#/components/schemas/Error"
            Error:
              type: "object"
              properties:
                key:
                  type: "string"
                  description: "Error Key"
                error:
                  type: "string"
                  description: "Error Message"
            GetTagSchemasRequest:
              type: "object"
              properties:
                schemas:
                  $ref: "#/components/schemas/TagSchemas"
                next:
                  type: "string"
                previous:
                  type: "string"
            TagSchemas:
              type: "array"
              description: "List of Tag Schemas"
              items:
                $ref: "#/components/schemas/TagSchemaSummary"
            AddTagSchemaRequest:
              type: "object"
              properties:
                name:
                  type: "string"
                tags:
                  $ref: "#/components/schemas/AddTagSchemaTags"
            AddTagSchemaTags:
              type: "object"
              properties:
                compositeKeys:
                  type: "array"
                  description: "List of Composite Keys"
                  items:
                    $ref: "#/components/schemas/TagSchemaCompositeKey"
                required:
                  type: "array"
                  description: "List of Required Tags"
                  items:
                    $ref: "#/components/schemas/TagSchemaRequired"
                optional:
                  type: "array"
                  description: "List of Optional Tags"
                  items:
                    $ref: "#/components/schemas/TagSchemaOptional"
                allowAdditionalTags:
                  type: "boolean"
                  default: true
            TagSchemaSummary:
              type: "object"
              properties:
                tagSchemaId:
                  type: "string"
                name:
                  type: "string"
                userId:
                  type: "string"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
            GetTagSchemaRequest:
              type: "object"
              properties:
                tagSchemaId:
                  type: "string"
                name:
                  type: "string"
                userId:
                  type: "string"
                insertedDate:
                  type: "string"
                  format: "date-time"
                  description: "Inserted Timestamp"
                tags:
                  type: "object"
                  properties:
                    compositeKeys:
                      type: "array"
                      description: "List of Composite Keys"
                      items:
                        $ref: "#/components/schemas/TagSchemaCompositeKey"
                    required:
                      type: "array"
                      description: "List of Required Tags"
                      items:
                        $ref: "#/components/schemas/TagSchemaRequired"
                    optional:
                      type: "array"
                      description: "List of Optional Tags"
                      items:
                        $ref: "#/components/schemas/TagSchemaOptional"
                    allowAdditionalTags:
                      type: "boolean"
                      default: true
            TagSchemaCompositeKey:
              type: "object"
              properties:
                key:
                  type: "array"
                  items:
                    type: "string"
            TagSchemaRequired:
              type: "object"
              properties:
                key:
                  type: "string"
                defaultValues:
                  type: "array"
                  description: "Default values"
                  items:
                    type: "string"
                allowedValues:
                  type: "array"
                  description: "Only valid values"
                  items:
                    type: "string"
            TagSchemaOptional:
              type: "object"
              properties:
                key:
                  type: "string"
                defaultValues:
                  type: "array"
                  description: "Default values"
                  items:
                    type: "string"
                allowedValues:
                  type: "array"
                  description: "Only valid values"
                  items:
                    type: "string"
            OnlyOfficeDocumentNewRequest:
              description: "Only Office New Document Request"
              properties:
                extension:
                  type: "string"
                  enum:
                    - DOCX
                    - XLSX
                    - PPTX
            OnlyOfficeDocumentEditRequest:
              description: "Only Office Edit Document Request"
            OnlyOfficeDocumentResponse:
              type: "object"
              properties:
                config:
                  type: "object"
                  properties:
                    onlyOfficeUrl:
                      description: "Url of the OnlyOffice application"
                      type: "string"                    
                    token:
                      description: "OnlyOffice security token"
                      type: "string"
                    documentType:
                      description: "Type of document (https://api.onlyoffice.com/editors/config/)"
                      type: "string"
                    editorConfig:
                      type: "object"
                      properties:
                        callbackUrl:
                          type: "string"
                    document:
                      type: "object"
                      properties:
                        url:
                          description: "Defines the absolute URL where the source viewed or edited document is stored"
                          type: "string"
                        title:
                          description: "Defines the desired file name for the viewed or edited document"
                          type: "string"
                        key:
                          description: "Defines the unique document identifier used by the service to recognize the document"
                          type: "string"
                        fileType:
                          description: "Defines the type of the file for the source viewed or edited document"
                          type: "string"
            OnlyOfficeDocumentSaveResponse:
              type: "object"
              properties:
                message:
                  type: "string"
          securitySchemes:
            AuthorizationCognito:
              type: oauth2
              flows: {}
              x-amazon-apigateway-authorizer:
                type: jwt
                jwtConfiguration:
                  issuer:
                    Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
                  audience:
                  - Fn::Sub: "${CognitoUserPoolClient}"
                identitySource: "$request.header.Authorization"
            sigv4:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "awsSigv4"
          x-amazon-apigateway-integrations:
            lambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            ocrLambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            antivirusLambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            fulltextLambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"
            onlyOfficeLambdaApi200:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "200"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Methods: "'*'"
                    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                    method.response.header.Access-Control-Allow-Origin: "'*'"
              passthroughBehavior: "when_no_templates"
              httpMethod: "POST"
              type: "aws_proxy"
              payloadFormatVersion: "1.0"              
            lambdaApi201:
              uri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
              responses:
                default:
                  statusCode: "201"
                  responseParameters:
                    method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                    method.response.header.Access-Control-Allow-Methods: '''*'''
                    method.response.header.Access-Control-Allow-Origin: '''*'''
              passthroughBehavior: WHEN_NO_TEMPLATES
              httpMethod: POST
              type: aws_proxy
              payloadFormatVersion: "1.0"
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        x-amazon-apigateway-cors:
          allowOrigins:
          - "*"
          maxAge: 3600
          allowMethods:
          - "*"
          allowHeaders:
          - "*"
        tags:
        - name: Application
          x-amazon-apigateway-tag-value: "FormKiQ"
        - name: AppEnvironment
          x-amazon-apigateway-tag-value:
            Fn::Sub: "${AppEnvironment}"
