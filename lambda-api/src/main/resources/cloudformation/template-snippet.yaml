AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - API

Metadata:
  AWS::ServerlessRepo::Application:
    Name: FormKiQ-Core-Api
    Description: Base component of FormKiQ-Core
    Author: FormKiQ Inc
    SpdxLicenseId: MIT
    LicenseUrl: file://../../../LICENSE
    ReadmeUrl: file://../../../README.md
    Labels: []
    HomePageUrl: https://github.com/formkiq/formkiq-core
    SourceCodeUrl: https://github.com/formkiq/formkiq-core
    
Parameters:
              
  AppEnvironment:
    Type: String
    AllowedPattern: ".+"
    Description: The Document Stack Environment

  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "pro"]
    
  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 512
    MinValue: 128
    MaxValue: 3008
  
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60

  EnablePublicUrls:
    Description: Whether to enable public urls
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  AllowAdminCreateUserOnly:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
     
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]    

Resources:
    
  DocumentsApiRequests:
    Type: AWS::Serverless::Function
    DependsOn:
    - DocumentsApiRequestsRole
    Properties:
      Handler: com.formkiq.stacks.api.CoreRequestHandler
      Runtime: provided
      Timeout: !Sub "${LambdaTimeout}"
      MemorySize: !Sub "${LambdaMemory}"
      CodeUri: ./lambda-api-graalvm.zip
      AutoPublishCodeSha256: F1D9B3966753C69829FBA656DC702C117F28D1C8AE09CF1CE02A94C91BDDE3AE
      Environment:
        Variables:
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
          DEBUG: false
          DOCUMENTS_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
          CACHE_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName:1}}"
          DOCUMENTS_S3_BUCKET: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}"
          STAGE_DOCUMENTS_S3_BUCKET: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}"
          ENABLE_PUBLIC_URLS: !Sub "${EnablePublicUrls}"
          FORMKIQ_TYPE: !Ref FormKiQType
      Role: !GetAtt [DocumentsApiRequestsRole, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
        
  DocumentsApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - DocumentsIamApi
    - DocumentsApiRequests
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DocumentsApiRequests
      Principal: apigateway.amazonaws.com
  
  DocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DocumentsHttpApi
      AutoDeploy: true
      Description: !Sub "Documents API ${AppEnvironment}"
      StageName: "$default"
    
  IamDocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref DocumentsIamApi
      AutoDeploy: true
      Description: !Sub "Documents IAM API ${AppEnvironment}"
      StageName: "$default"
          
  DocumentsHttpApi: empty
    
  DocumentsIamApi: empty
            
  DocumentsHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses Cognito authorization"
      Name: !Sub "/formkiq/${AppEnvironment}/api/DocumentsHttpUrl"
      Type: String
      Value: !Sub "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
      
  DocumentsApiRequestsRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: apigatewaylambdarole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:ListBucketVersions
              Resource:
              - !Sub
                - 'arn:aws:s3:::${Bucket}'
                - { Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}" }
              - !Sub
                - 'arn:aws:s3:::${Bucket}/*'
                - { Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket:1}}" }
              - !Sub
                - 'arn:aws:s3:::${Bucket}'
                - { Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}" }
              - !Sub
                - 'arn:aws:s3:::${Bucket}/*'
                - { Bucket: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket:1}}" }
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:Get*
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              Resource: 
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
            - Effect: Allow
              Action:
              - dynamodb:Query
              - dynamodb:Scan
              Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}/index/*"
            - Effect: Allow
              Action:
              - dynamodb:Get*
              - dynamodb:Put*
              Resource: 
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName:1}}"
            - Effect: Allow
              Action:
              - ssm:GetParameter
              - ssm:PutParameter
              Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
            - Effect: Allow
              Action:
              - sqs:SendMessage
              Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:formkiq*"
              
  DocumentsIamApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses IAM authorization"
      Name: !Sub "/formkiq/${AppEnvironment}/api/DocumentsIamUrl"
      Type: String
      Value: !Sub "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
        
  DocumentsApiRequestsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing API Requests"
      Name: !Sub "/formkiq/${AppEnvironment}/lambda/DocumentsApiRequests"
      Type: String
      Value: !Ref DocumentsApiRequests
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt [CloudWatchRole, Arn] 

  ApiGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ApiGatewayInvokeGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ApiGatewayInvokeGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroup"
      Type: String
      Value: !Ref ApiGatewayInvokeGroup
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  ApiGatewayInvokeGroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group Arn that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroupArn"
      Type: String
      Value: !GetAtt [ApiGatewayInvokeGroup, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
    
  ApiGatewayInvokeRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRole"
      Type: String
      Value: !Ref ApiGatewayInvokeRole
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  ApiGatewayInvokeRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role Arn that allows invoking of endpoints"
      Name: !Sub "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRoleArn"
      Type: String
      Value: !GetAtt [ApiGatewayInvokeRole, Arn]
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn:
    - CognitoCustomMessage
    Properties:
      UserPoolName: !Sub "${AWS::StackName} - ${AppEnvironment}"
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: !Sub "${PasswordMinimumLength}"
          RequireLowercase: !Sub "${PasswordRequireLowercase}"
          RequireNumbers: !Sub "${PasswordRequireNumbers}"
          RequireSymbols: !Sub "${PasswordRequireSymbols}"
          RequireUppercase: !Sub "${PasswordRequireUppercase}"          
      LambdaConfig:
        CustomMessage: !GetAtt CognitoCustomMessage.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Sub "${AllowAdminCreateUserOnly}"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolTags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ DocumentStack"
        StackName: !Sub "${AWS::StackName}"
       
  AdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "Admins"
      RoleArn: !GetAtt AdminGroupRole.Arn
      UserPoolId: !Ref CognitoUserPool
  
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-IdentityPool"
      CognitoIdentityProviders: 
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  AdminGroupRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub "${AWS::StackName}-AdminGroupRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: [ "cognito-idp:AdminAddUserToGroup", "cognito-idp:AdminConfirmSignUp", "cognito-idp:AdminCreateUser", "cognito-idp:AdminDeleteUser", "cognito-idp:AdminListGroupsForUser", "cognito-idp:AdminRemoveUserFromGroup", "cognito-idp:AdminResetUserPassword", "cognito-idp:ListUsers", "cognito-idp:ListUsersInGroup" ]
                Resource: !GetAtt CognitoUserPool.Arn

  DefaultGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default"
      UserPoolId: !Ref CognitoUserPool

  DefaultReadGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default_read"
      UserPoolId: !Ref CognitoUserPool
                      
  CognitoNoAccessRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
        - Key: "StackName"
          Value: !Sub "${AWS::StackName}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies: 
        - PolicyName: !Sub "${AWS::StackName}-CognitoNoAccessRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Deny"
                Action: [ "*" ]
                Resource: "*"
                              
  # Creates a User Pool Client to be used by the identity pool
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED 
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

  CognitoIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      RoleMappings:
        cognitoProvider:
          IdentityProvider: !Join [ "", ["cognito-idp.", !Sub "${AWS::Region}", ".amazonaws.com/", !Ref CognitoUserPool, ":", !Ref CognitoUserPoolClient] ]
          Type: Token
          AmbiguousRoleResolution: Deny
      Roles:
        authenticated: !GetAtt CognitoNoAccessRole.Arn
        unauthenticated: !GetAtt CognitoNoAccessRole.Arn
        
  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolId"
      Type: String
      Value: !Ref CognitoUserPool
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
        
  CognitoUserPoolArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Arn"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolArn"
      Type: String
      Value: !GetAtt CognitoUserPool.Arn
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CognitoUserPoolProviderUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider URL"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderUrl"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderURL
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CognitoUserPoolProviderNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider Name"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderName"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderName
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CognitoUserPoolClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Client"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolClientId"
      Type: String
      Value: !Ref CognitoUserPoolClient
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  CognitoIdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Identity Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/IdentityPoolId"
      Type: String
      Value: !Ref CognitoIdentityPool
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"

  AdminGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/AdminGroup"
      Type: String
      Value: !Ref AdminGroup
      Tags:
        Application: !Sub "FormKiQ ${FormKiQType}"
        AppEnvironment: !Sub "${AppEnvironment}"
        StackName: !Sub "${AWS::StackName}"
        
  CognitoCustomMessage:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CognitoCustomMessageRole.Arn
      Runtime: nodejs10.x
      CodeUri: ./cognito-user-signup.zip
      Environment:
        Variables:
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
      Tags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: !Sub "FormKiQ ${FormKiQType}"
        StackName: !Sub "${AWS::StackName}"

  CognitoCustomMessageRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: !Sub "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-CognitoCustomMessageRole"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource: 
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
            
  CognitoCustomMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CognitoCustomMessage
    - CognitoUserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoCustomMessage
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn
      
Outputs:
  ApiGatewayInvokeRole:
    Description: "API Gateway Role that allows invoking of endpoints"
    Value: !Ref ApiGatewayInvokeRole
  ApiGatewayInvokeRoleArn:
    Description: "API Gateway Role Arn that allows invoking of endpoints"
    Value: !GetAtt [ApiGatewayInvokeRole, Arn]
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group that allows invoking of endpoints"
    Value: !Ref ApiGatewayInvokeGroup
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group ARN that allows invoking of endpoints"
    Value: !GetAtt [ApiGatewayInvokeGroup, Arn]    
  DocumentsApiRequests:
    Description: "FormKiQ Api Request Handler"
    Value: !Ref DocumentsApiRequests
  DocumentsIamApiUrl:
    Description: "The endpoint url for the IAM API"
    Value: !Sub "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
  DocumentsHttpApiUrl:
    Description: "The endpoint url for the Http API"
    Value: !Sub "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  CognitoUserPoolId:
    Description: "Cognito User Pool"
    Value: !Ref CognitoUserPool
  CognitoUserPoolArn:
    Description: "Cognito User Pool Arn"
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolProviderUrl:
    Description: "Cognito User Pool Provider URL"
    Value: !GetAtt CognitoUserPool.ProviderURL
  CognitoUserPoolProviderName:
    Description: "Cognito User Pool Provider Name"
    Value: !GetAtt CognitoUserPool.ProviderName
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool"
    Value: !Ref CognitoIdentityPool
  CognitoAdminGroup:
    Description: "FormKiQ Cognito Admin Group"
    Value: !Ref AdminGroup