#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - API
    
Parameters:
              
  AppEnvironment:
    Type: String
    AllowedPattern: ".+"
    Description: The FormKiQ Environment

  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "enterprise"]
    
  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 1024
    MinValue: 128
    MaxValue: 3008
  
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60

  EnablePublicUrls:
    Description: Whether to enable public urls
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  AllowAdminCreateUserOnly:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
     
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]    

  CognitoUserPool:
    Type: String
    Description: The Cognito User Pool Id
    AllowedPattern: ".+"

  CognitoUserPoolClient:
    Type: String
    Description: The Cognito User Pool Client Id
    AllowedPattern: ".+"

  WebsocketSqsQueueUrl:
    Type: String
    Description: "SQS URL for processing Websocket Messages"
    AllowedPattern: ".+"
   
  UserAuthentication:
    Description: How are the users authenticating
    AllowedPattern: ".+"
    Type: String
    Default: "cognito"

  TypesenseApiKey:
    Type: String
    Description: TypeSense API Key
    
  TypesenseApiEndpoint:
    Type: String
    Description: TypeSense API Endpoint

  VpcStackName:
    Type: String
    Description: FormKiQ VPC Stack Name 
    
Conditions:
  HasVpcStackName:
    Fn::Not:
      - Fn::Equals: 
        - Ref: VpcStackName
        - ''

  HasTypesenseApiKey:
    Fn::Not:
      - Fn::Equals: 
        - Ref: TypesenseApiKey
        - ''
        
  CreateTypesenseResources: 
    Fn::And:
      - Condition: HasVpcStackName
      - Condition: HasTypesenseApiKey
      
Resources:        
        
  DocumentsApiRequests:
    Type: AWS::Serverless::Function
    DependsOn:
    - DocumentsApiRequestsRole
    Properties:
      Handler: com.formkiq.stacks.api.CoreRequestHandler
      Description: Lambda function that processes API requests
      Runtime: provided
      Timeout: 
        Fn::Sub: "${LambdaTimeout}"
      MemorySize: 
        Fn::Sub: "${LambdaMemory}"
      CodeUri: ./lambda-api-graalvm.zip
      AutoPublishCodeSha256: #@ data.values.hash or assert.fail("missing version")
      Environment:
        Variables:
          APP_ENVIRONMENT: 
            Fn::Sub: "${AppEnvironment}"
          DEBUG: false
          DOCUMENTS_TABLE: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}"
          CACHE_TABLE: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName}}"
          DOCUMENTS_S3_BUCKET: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket}}"
          STAGE_DOCUMENTS_S3_BUCKET: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket}}"
          ENABLE_PUBLIC_URLS: 
            Fn::Sub: "${EnablePublicUrls}"
          FORMKIQ_TYPE: 
            Ref: FormKiQType
          WEBSOCKET_SQS_URL: 
            Ref: WebsocketSqsQueueUrl
          USER_AUTHENTICATION:
            Ref: UserAuthentication
          DOCUMENT_VERSIONS_PLUGIN: "com.formkiq.stacks.dynamodb.DocumentVersionServiceNoVersioning"
          DOCUMENT_SYNC_TABLE: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentSyncsTableName}}"
          TYPESENSE_HOST:
            Ref: TypesenseApiEndpoint
          TYPESENSE_API_KEY:
            Ref: TypesenseApiKey
          MODULE_typesense:
            Fn::If:
            - CreateTypesenseResources
            - "true"
            - "false"
      Role: 
        Fn::GetAtt:
        - DocumentsApiRequestsRole
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
        
  DocumentsApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - DocumentsIamApi
    - DocumentsApiRequests
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Ref: DocumentsApiRequests
      Principal: apigateway.amazonaws.com

  DocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: 
        Ref: DocumentsHttpApi
      AutoDeploy: true
      Description: 
        Fn::Sub: "Documents API ${AppEnvironment}"
      StageName: "$default"
    
  IamDocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: 
        Ref: DocumentsIamApi
      AutoDeploy: true
      Description: 
        Fn::Sub: "Documents IAM API ${AppEnvironment}"
      StageName: "$default"

  DocumentsHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses Cognito authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsHttpUrl"
      Type: String
      Value: 
        Fn::Sub: "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  DocumentsPublicHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The Public URL for the API endpoint that uses Cognito authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsPublicHttpUrl"
      Type: String
      Value: 
        Fn::Sub: "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
        
  DocumentsApiRequestsRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess
      Policies:
        -
          PolicyName: apigatewaylambdarole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:ListBucketVersions
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket}}"
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket}}"
                  - '/*'
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket}}"
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket}}"
                  - '/*'
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:Get*
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              Resource: 
              - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}"
            - Effect: Allow
              Action:
              - dynamodb:Query
              - dynamodb:Scan
              Resource:
              - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}/index/*"
            - Effect: Allow
              Action:
              - dynamodb:Get*
              - dynamodb:Put*
              Resource: 
              - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/CacheTableName}}"
            - Effect: Allow
              Action:
              - ssm:GetParameter
              - ssm:PutParameter
              Resource: 
              - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
            - Effect: Allow
              Action:
              - sqs:SendMessage
              Resource:
              - Fn::Sub: "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:formkiq*"
              - Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/sqs/WebsocketArn}}"
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:Get*
            - dynamodb:Query
            Resource:
            - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentSyncsTableName}}"
              
  DocumentsIamApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses IAM authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsIamUrl"
      Type: String
      Value: 
        Fn::Sub: "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
        
  DocumentsApiRequestsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing API Requests"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/lambda/DocumentsApiRequests"
      Type: String
      Value: 
        Ref: DocumentsApiRequests
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: 
        Fn::GetAtt:
        - CloudWatchRole
        - Arn 

  ApiGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
        - Key: "StackName"
          Value: 
            Fn::Sub: "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ApiGatewayInvokeGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  ApiGatewayInvokeGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroup"
      Type: String
      Value: 
        Ref: ApiGatewayInvokeGroup
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  ApiGatewayInvokeGroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group Arn that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroupArn"
      Type: String
      Value: 
        Fn::GetAtt:
        - ApiGatewayInvokeGroup
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
    
  ApiGatewayInvokeRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRole"
      Type: String
      Value: 
        Ref: ApiGatewayInvokeRole
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  ApiGatewayInvokeRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role Arn that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRoleArn"
      Type: String
      Value: 
        Fn::GetAtt:
        - ApiGatewayInvokeRole
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
      
Outputs:
  ApiGatewayInvokeRole:
    Description: "API Gateway Role that allows invoking of endpoints"
    Value: 
      Ref: ApiGatewayInvokeRole
  ApiGatewayInvokeRoleArn:
    Description: "API Gateway Role Arn that allows invoking of endpoints"
    Value: 
      Fn::GetAtt:
      - ApiGatewayInvokeRole
      - Arn
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group that allows invoking of endpoints"
    Value: 
      Ref: ApiGatewayInvokeGroup
  ApiGatewayInvokeGroupArn:
    Description: "API Gateway Group ARN that allows invoking of endpoints"
    Value: 
      Fn::GetAtt:
      - ApiGatewayInvokeGroup
      - Arn    
  DocumentsApiRequests:
    Description: "FormKiQ Api Request Handler"
    Value: 
      Ref: DocumentsApiRequests
  DocumentsIamApiUrl:
    Description: "The endpoint url for the IAM API"
    Value: 
      Fn::Sub: "https://${DocumentsIamApi}.execute-api.${AWS::Region}.amazonaws.com"
  DocumentsHttpApiUrl:
    Description: "The endpoint url for the Http API"
    Value: 
      Fn::Sub: "https://${DocumentsHttpApi}.execute-api.${AWS::Region}.amazonaws.com"