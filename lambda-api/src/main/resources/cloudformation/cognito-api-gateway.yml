AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - API Gateway Cognito.

Parameters:
    
  AppEnvironment:
    Type: String
    Description: The Application Environment
    AllowedPattern: ".+"
          
  AllowAdminCreateUserOnly:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
     
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]

Resources:

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn:
    - CognitoCustomMessage
    Properties:
      UserPoolName: !Sub "${AWS::StackName} - ${AppEnvironment}"
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: !Sub "${PasswordMinimumLength}"
          RequireLowercase: !Sub "${PasswordRequireLowercase}"
          RequireNumbers: !Sub "${PasswordRequireNumbers}"
          RequireSymbols: !Sub "${PasswordRequireSymbols}"
          RequireUppercase: !Sub "${PasswordRequireUppercase}"          
      LambdaConfig:
        CustomMessage: !GetAtt CognitoCustomMessage.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Sub "${AllowAdminCreateUserOnly}"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      UserPoolTags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ DocumentStack"
       
  AdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "Admins"
      RoleArn: !GetAtt AdminGroupRole.Arn
      UserPoolId: !Ref CognitoUserPool
  
  CognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-IdentityPool"
      CognitoIdentityProviders: 
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false

  AdminGroupRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub "${AWS::StackName}-AdminGroupRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: [ "cognito-idp:AdminAddUserToGroup", "cognito-idp:AdminConfirmSignUp", "cognito-idp:AdminCreateUser", "cognito-idp:AdminDeleteUser", "cognito-idp:AdminListGroupsForUser", "cognito-idp:AdminRemoveUserFromGroup", "cognito-idp:AdminResetUserPassword", "cognito-idp:ListUsers", "cognito-idp:ListUsersInGroup" ]
                Resource: !GetAtt CognitoUserPool.Arn

  DefaultGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default"
      UserPoolId: !Ref CognitoUserPool

  DefaultReadGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default_read"
      UserPoolId: !Ref CognitoUserPool
                      
  CognitoNoAccessRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies: 
        - PolicyName: !Sub "${AWS::StackName}-CognitoNoAccessRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Deny"
                Action: [ "*" ]
                Resource: "*"
                              
  # Creates a User Pool Client to be used by the identity pool
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      PreventUserExistenceErrors: ENABLED 
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH

  CognitoIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      RoleMappings:
        cognitoProvider:
          IdentityProvider: !Join [ "", ["cognito-idp.", !Sub "${AWS::Region}", ".amazonaws.com/", !Ref CognitoUserPool, ":", !Ref CognitoUserPoolClient] ]
          Type: Token
          AmbiguousRoleResolution: Deny
      Roles:
        authenticated: !GetAtt CognitoNoAccessRole.Arn
        unauthenticated: !GetAtt CognitoNoAccessRole.Arn
        
  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolId"
      Type: String
      Value: !Ref CognitoUserPool
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  CognitoUserPoolArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Arn"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolArn"
      Type: String
      Value: !GetAtt CognitoUserPool.Arn
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  CognitoUserPoolProviderUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider URL"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderUrl"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderURL
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  CognitoUserPoolProviderNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Provider Name"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolProviderName"
      Type: String
      Value: !GetAtt CognitoUserPool.ProviderName
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  CognitoUserPoolClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito User Pool Client"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/UserPoolClientId"
      Type: String
      Value: !Ref CognitoUserPoolClient
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  CognitoIdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Identity Pool"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/IdentityPoolId"
      Type: String
      Value: !Ref CognitoIdentityPool
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  AdminGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group"
      Name: !Sub "/formkiq/${AppEnvironment}/cognito/AdminGroup"
      Type: String
      Value: !Ref AdminGroup
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  CognitoCustomMessage:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CognitoCustomMessageRole.Arn
      Runtime: nodejs10.x
      CodeUri: ../../../../../lambda-cognito-user-signup/build/distributions/cognito-user-signup.zip
      Environment:
        Variables:
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
      Tags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ Core"

  CognitoCustomMessageRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-CognitoCustomMessageRole"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource: 
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/formkiq/*"
            
  CognitoCustomMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - CognitoCustomMessage
    - CognitoUserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoCustomMessage
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

Outputs:
  CognitoUserPoolId:
    Description: "Cognito User Pool"
    Value: !Ref CognitoUserPool
  CognitoUserPoolArn:
    Description: "Cognito User Pool Arn"
    Value: !GetAtt CognitoUserPool.Arn
  CognitoUserPoolProviderUrl:
    Description: "Cognito User Pool Provider URL"
    Value: !GetAtt CognitoUserPool.ProviderURL
  CognitoUserPoolProviderName:
    Description: "Cognito User Pool Provider Name"
    Value: !GetAtt CognitoUserPool.ProviderName
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool"
    Value: !Ref CognitoIdentityPool
  CognitoAdminGroup:
    Description: "FormKiQ Cognito Admin Group"
    Value: !Ref AdminGroup