
description = "Lambda API to Dynamodb"

dependencies {

	annotationProcessor group: 'com.formkiq', name: 'graalvm-annotations-processor', version: '1.0.0'
	
	implementation project(':aws-s3')
	implementation project(':aws-sqs')
	implementation project(':aws-ssm')
	implementation project(':dynamodb-documents')
	
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    
    implementation group: 'com.formkiq', name: 'lambda-runtime-graalvm', version:'2.1'
    implementation group: 'com.formkiq', name: 'graalvm-annotations', version: '1.0.0'
    
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.26'

	testImplementation project(':aws-cognito')
	testImplementation project(':aws-iam')
	testImplementation project(':aws-sts')
	testImplementation group: 'software.amazon.awssdk', name: 'apigateway', version: '2.15.25'
	testImplementation group: 'software.amazon.awssdk', name: 'sts', version: '2.15.25'
	
	testImplementation group: 'com.formkiq.stacks', name: 'client', version:'1.5.1'
    testImplementation group: 'junit', name: 'junit', version:'4.+'
}

compileJava {
    options.annotationProcessorPath += configurations.runtimeClasspath
}

nativeImage {
	outputFileName = "server"
	javaVersion = "java11"
	imageVersion = "20.3.0"
	mainClassName = "com.formkiq.lambda.runtime.graalvm.LambdaRuntime"
    enableHttp = true
    enableHttps = true
    enableDocker = true
	reflectionConfig = "$buildDir/classes/java/main/META-INF/graal/reflect.json"
	systemProperty = ["java.net.preferIPv4Stack=true"]
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/api/awstest/**'
  
  doFirst {
	macroLocalStackStart()
	macroDynamoDbStart()
  }
  
  doLast {
	macroDockerComposeDown()
  } 
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  include 'com/formkiq/stacks/api/awstest/**'
  outputs.upToDateWhen {false}
}

task buildZip(type: Zip) {
	inputs.files("${project.projectDir}/runtime/bootstrap", "${buildDir}/graalvm/server")
  	outputs.dir("${buildDir}/distributions")
    
	archiveName "lambda-api-graalvm.zip"
    destinationDir(file("${buildDir}/distributions"))
    from("${project.projectDir}/runtime") {
        include 'bootstrap'
    }
    from("${buildDir}/graalvm") {
        include 'server'
    }
}

task buildJava11Zip(type: Zip) {
    from compileJava
    into('lib') {
        from configurations.default
    }           
}

task uploadZipToS3 {
  dependsOn buildZip
  inputs.files("${buildDir}/distributions/lambda-api-graalvm.zip")
  outputs.dir("${buildDir}/distributions")
  doLast {
	exec {
	  commandLine "bash", "-c", "aws s3 cp ${buildDir}/distributions/lambda-api-graalvm.zip s3://${distrobucket}/formkiq-core/${project.version}/lambda-api-graalvm.zip --profile ${testprofile}"
	}
  }
}

task assembleTemplate {
    dependsOn buildZip, ':lambda-cognito-user-signup:build'
	inputs.files("template-snippet.yaml", "template-docker-snippet.yaml", "api.yaml", "api-iam.yaml")
	outputs.dir("${buildDir}/distributions")
	doLast {
		exec {
			commandLine "bash", "-c", "mkdir -p ${buildDir}/distributions/formkiq-core/sam/console && mkdir -p ${buildDir}/distributions/formkiq-core/docker/console && mkdir -p ${buildDir}/distributions/formkiq-core/sar/console"
		}
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "yq m --overwrite ./template-snippet.yaml ./api.yaml ./api-iam.yaml > ./template-sar.yaml"
		}
		// build SAM distribution
		exec {
			commandLine "bash", "-c", "yq d ./template-sar.yaml 'Metadata' > ./template.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq m template.yaml template-docker-snippet.yaml > build/formkiq-core-docker.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq d -i build/formkiq-core-docker.yaml 'Resources.DocumentsApiRequests.Properties.CodeUri'"
		}
		exec {
			commandLine "bash", "-c", "yq d -i build/formkiq-core-docker.yaml 'Resources.CognitoCustomMessage.Properties.CodeUri'"
		}
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "sam package --template-file template-sar.yaml --s3-bucket ${distrobucket} --region ${testregion} --profile ${testprofile} --output-template-file build/formkiq-core-sar.yaml"
		}
	}
}

task buildDockerImage {
  dependsOn buildZip
  inputs.files("Dockerfile", "src/main")
  outputs.dir("${buildDir}/distributions")
  doLast {
	exec {
	  commandLine "bash", "-c", "docker build -t formkiq-core-api ."
	}
  }
}

task dockerpush {
  dependsOn buildDockerImage
  outputs.upToDateWhen {false}
  doLast {
	exec {
	  commandLine "bash", "-c", "aws ecr-public get-login-password --region ${testregion} --profile ${testprofile} | docker login --username AWS --password-stdin public.ecr.aws/n3i8r5o8"
	}
	exec {
	  commandLine "bash", "-c", "docker tag formkiq-core-api:latest public.ecr.aws/n3i8r5o8/formkiq-core-api:${project.version}"
	}
	exec {
	  commandLine "bash", "-c", "docker push public.ecr.aws/n3i8r5o8/formkiq-core-api:${project.version}"
	}
  }  
}

buildJava11Zip.dependsOn jar

buildZip.dependsOn graalvmNativeImage

graalvmNativeImage.dependsOn check
build.dependsOn uploadZipToS3, assembleTemplate
