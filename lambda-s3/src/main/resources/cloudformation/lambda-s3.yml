AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - S3.

Parameters:
    
  AppEnvironment:
    Type: String
    Description: The Application Environment
    AllowedPattern: ".+"

  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 512
    MinValue: 128
    MaxValue: 3008
  
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60
              
Resources:

  SnsDocumentsCreateEventTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SNS Topic for processing Document Create Events"
      Name: !Sub "/formkiq/${AppEnvironment}/sns/SnsDocumentsCreateEventTopicArn"
      Type: String
      Value: !Ref SnsDocumentsCreateEventTopic
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  SnsDocumentsUpdateEventTopicParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SNS Topic for processing Document Update Events"
      Name: !Sub "/formkiq/${AppEnvironment}/sns/SnsDocumentsUpdateEventTopicArn"
      Type: String
      Value: !Ref SnsDocumentsUpdateEventTopic
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  SnsDocumentsDeleteEventTopicParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SNS Topic for processing Document Delete Events"
      Name: !Sub "/formkiq/${AppEnvironment}/sns/SnsDocumentsDeleteEventTopicArn"
      Type: String
      Value: !Ref SnsDocumentsDeleteEventTopic
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  DocumentsS3BucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Documents S3 Bucket Name"
      Name: !Sub "/formkiq/${AppEnvironment}/s3/DocumentsS3Bucket"
      Type: String
      Value: !Ref DocumentsS3Buckets
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  DocumentsStageS3BucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Documents Staging S3 Bucket Name"
      Name: !Sub "/formkiq/${AppEnvironment}/s3/DocumentsStageS3Bucket"
      Type: String
      Value: !Ref DocumentsStageS3Bucket
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
                      
  DocumentsStageS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
    - StagingS3Create
    Properties:
      BucketName: !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-staging"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
        -  AllowedOrigins: ["*"]
           AllowedMethods: ["PUT", "POST"]
           AllowedHeaders: ["*"]
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt [StagingS3Create, Arn]
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"

  SnsDocumentsCreateEventTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Tags:
          - Key: "Application"
            Value: "FormKiQ Core"      
          - Key: "AppEnvironment"
            Value: !Sub "${AppEnvironment}"
            
  SnsDocumentsCreateEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
    - SnsDocumentsCreateEventTopic
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sns:Publish
          Resource: !Ref SnsDocumentsCreateEventTopic
      Topics:
      - Ref: SnsDocumentsCreateEventTopic

  SnsDocumentsUpdateEventTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Tags:
          - Key: "Application"
            Value: "FormKiQ Core"      
          - Key: "AppEnvironment"
            Value: !Sub "${AppEnvironment}"
            
  SnsDocumentsUpdateEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
    - SnsDocumentsUpdateEventTopic
    - DocumentsS3Update
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sns:Publish
          Resource: !Ref SnsDocumentsUpdateEventTopic
          Condition:
            ArnLike:
              aws:SourceArn: !GetAtt [DocumentsS3Update, Arn]
      Topics:
      - Ref: SnsDocumentsUpdateEventTopic

  SnsDocumentsDeleteEventTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Tags:
          - Key: "Application"
            Value: "FormKiQ Core"      
          - Key: "AppEnvironment"
            Value: !Sub "${AppEnvironment}"
            
  SnsDocumentsDeleteEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn:
    - SnsDocumentsDeleteEventTopic
    - DocumentsS3Update
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sns:Publish
          Resource: !Ref SnsDocumentsDeleteEventTopic
          Condition:
            ArnLike:
              aws:SourceArn: !GetAtt [DocumentsS3Update, Arn]
      Topics:
      - Ref: SnsDocumentsDeleteEventTopic
      
  DocumentsS3Buckets:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    DependsOn:
    - DocumentsS3Update
    Properties:
      BucketName: !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-documents"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
        -  AllowedOrigins: ["*"]
           AllowedMethods: ["PUT", "POST"]
           AllowedHeaders: ["*"]
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt [DocumentsS3Update, Arn]
        - Event: 's3:ObjectRemoved:*'
          Function: !GetAtt [DocumentsS3Update, Arn]
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"

  StagingS3Create:
    Type: AWS::Serverless::Function
    DependsOn:
    - S3LambdaRolePolicy
    Properties:
      Handler: com.formkiq.stacks.lambda.s3.StagingS3Create
      Runtime: provided
      Timeout: !Sub "${LambdaTimeout}"
      MemorySize: !Sub "${LambdaMemory}"
      CodeUri: ../../../../build/distributions/lambda-s3-graalvm.zip
      Environment:
        Variables:
          DOCUMENTS_S3_BUCKET: !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-documents"
          DOCUMENTS_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
          DEBUG: false
      Role: !GetAtt [S3LambdaRole, Arn]
      Tags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ Core"

  StagingCreateObjectParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing Staging Document Create Events"
      Name: !Sub "/formkiq/${AppEnvironment}/lambda/StagingCreateObject"
      Type: String
      Value: !Ref StagingS3Create
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  StagingCreateObjectPermission:
    DependsOn:
    - StagingS3Create
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StagingS3Create.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-staging"]]
              
  DocumentsS3Update:
    Type: AWS::Serverless::Function
    DependsOn:
    - S3LambdaRolePolicy
    Properties:    
      Handler: com.formkiq.stacks.lambda.s3.DocumentsS3Update
      Runtime: provided
      Timeout: !Sub "${LambdaTimeout}"
      MemorySize: !Sub "${LambdaMemory}"
      CodeUri: ../../../../build/distributions/lambda-s3-graalvm.zip
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Sub "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
          APP_ENVIRONMENT: !Sub "${AppEnvironment}"
          DEBUG: false
          SNS_UPDATE_TOPIC_ARN: !Ref SnsDocumentsUpdateEventTopic
          SNS_CREATE_TOPIC: !Ref SnsDocumentsCreateEventTopic
          SNS_DELETE_TOPIC: !Ref SnsDocumentsDeleteEventTopic          
      Role: !GetAtt [S3LambdaRole, Arn]
      Tags:
        AppEnvironment: !Sub "${AppEnvironment}"
        Application: "FormKiQ Core"
      Events:
        CreateSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DocumentsUpdateQueue.Arn
            BatchSize: 10

  DocumentsUpdateQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 120
      ReceiveMessageWaitTimeSeconds: 20
      Tags:
          - Key: "Application"
            Value: "FormKiQ Core"      
          - Key: "AppEnvironment"
            Value: !Sub "${AppEnvironment}"
            
  DocumentsUpdateObjectParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing Document Update Events"
      Name: !Sub "/formkiq/${AppEnvironment}/lambda/DocumentsUpdateObject"
      Type: String
      Value: !Ref DocumentsS3Update
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"

  DocumentsUpdateQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: 
    - DocumentsUpdateQueue
    - SnsDocumentsCreateEventTopic
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: QueuePolicy
        Statement:
        - Sid: s3SendMessagesToQueue
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sqs:SendMessage
          Resource: !GetAtt [DocumentsUpdateQueue, Arn]
      Queues:
      - Ref: DocumentsUpdateQueue
      
  DocumentsUpdateQueueUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SQS URL for processing Document Update Events"
      Name: !Sub "/formkiq/${AppEnvironment}/sqs/DocumentsUpdateUrl"
      Type: String
      Value: !Ref DocumentsUpdateQueue
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  DocumentsUpdateQueueArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "SQS ARN for processing Document Update Events"
      Name: !Sub "/formkiq/${AppEnvironment}/sqs/DocumentsUpdateArn"
      Type: String
      Value: !GetAtt DocumentsUpdateQueue.Arn
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: !Sub "${AppEnvironment}"
        
  DocumentsUpdateObjectPermission:
    DependsOn:
    - DocumentsS3Update
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DocumentsS3Update.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-documents"]]

  S3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: "FormKiQ Core"        
        - Key: "AppEnvironment"
          Value: !Sub "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      
  S3LambdaRolePolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: s3-lambdarole
      Roles: 
        - 
          Ref: "S3LambdaRole"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-documents"]]
            - !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-staging"]]
          - Effect: Allow
            Action:
            - s3:GetObject*
            - s3:PutObject*
            - s3:DeleteObject
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-documents", /*]]
            - !Join ['', ['arn:aws:s3:::', !Sub "formkiq-core-${AppEnvironment}-${AWS::AccountId}-staging", /*]]
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Resource: 
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}"
          - Effect: Allow
            Action:
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName:1}}/index/*"
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - !GetAtt DocumentsUpdateQueue.Arn
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref SnsDocumentsCreateEventTopic
            - !Ref SnsDocumentsUpdateEventTopic
            - !Ref SnsDocumentsDeleteEventTopic

Outputs:

  DocumentsS3Buckets:
    Description: Document Bucket.
    Value: !Ref DocumentsS3Buckets
    
  DocumentsStageS3Bucket:
    Description: Document Bucket.
    Value: !Ref DocumentsStageS3Bucket
    
  DocumentsUpdateQueueUrl:
    Description: Documents Update Documents Queue Url
    Value: !Ref DocumentsUpdateQueue
  
  DocumentsUpdateQueueArn:
    Description: Documents S3 Update Documents Queue Arn
    Value: !GetAtt DocumentsUpdateQueue.Arn
        
  SnsDocumentsCreateEventTopicArn:
    Description: SNS Documents Create Event Handler
    Value: !Ref SnsDocumentsCreateEventTopic

  SnsDocumentsUpdateEventTopicArn:
    Description: SNS Documents Update Event Handler
    Value: !Ref SnsDocumentsUpdateEventTopic

  SnsDocumentsDeleteEventTopicArn:
    Description: SNS Documents Delete Event Handler
    Value: !Ref SnsDocumentsDeleteEventTopic
    
  DocumentsS3Update:
    Description: Documents MetaData Object Lambda
    Value: !Ref DocumentsS3Update