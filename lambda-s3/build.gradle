description = "FormKiQ Core - Lambda S3 to Dynamodb"

dependencies {

 	annotationProcessor group: 'com.formkiq', name: 'graalvm-annotations-processor', version: '1.0.0'
 
	implementation project(':aws-s3')
	implementation project(':aws-sns')
	implementation project(':aws-sqs')
	implementation project(':aws-ssm')
	implementation project(':dynamodb-documents')
	
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    
	implementation group: 'com.formkiq', name: 'lambda-runtime-graalvm', version:'2.3.1'
    implementation group: 'com.formkiq', name: 'graalvm-annotations', version: '1.0.0'
    
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
	
    testImplementation group: 'junit', name: 'junit', version:'4.+'
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

	testImplementation group: 'software.amazon.awssdk', name: 'dynamodb', version: '2.15.25'
	testImplementation group: 'software.amazon.awssdk', name: 's3', version: '2.15.25'
}

compileJava {
    options.annotationProcessorPath += configurations.runtimeClasspath
}

nativeImage { 
	outputFileName = "server"
	javaVersion = "java11"
	imageVersion = "21.0.0"
	mainClassName = "com.formkiq.lambda.runtime.graalvm.LambdaRuntime"
    enableHttp = true
    enableHttps = true
    enableDocker = true
	reflectionConfig = "$buildDir/classes/java/main/META-INF/graal/reflect.json"
	systemProperty = ["java.net.preferIPv4Stack=true"]
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/lambda/s3/awstest/**'
  
  doFirst {
    macroLocalStackStart()
	macroDynamoDbStart()
  }
  
  doLast {
	macroDockerComposeDown()
  }  
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  outputs.upToDateWhen {false}
  include 'com/formkiq/stacks/lambda/s3/awstest/**'    
}

task buildZip(type: Zip) {
	dependsOn graalvmNativeImage
	inputs.files("${project.projectDir}/runtime/bootstrap", "${buildDir}/graalvm/server")
  	outputs.dir("${buildDir}")
  	
	archiveName "lambda-s3-graalvm.zip"
    destinationDir(file("${buildDir}"))
    from("${project.projectDir}/runtime") {
        include 'bootstrap'
    }
    from("${buildDir}/graalvm") {
        include 'server'
    }
}

task assembleTemplate {
    dependsOn buildZip
	inputs.files("src/main/resources/cloudformation/template-sar.yaml")
	outputs.dir("${buildDir}/distributions/formkiq-core")
	doLast {
		exec {
			commandLine "bash", "-c", "mkdir -p ${buildDir}/distributions/formkiq-core/sam/storage && mkdir -p ${buildDir}/distributions/formkiq-core/sar/storage"
		}
		exec {
			commandLine "bash", "-c", "cp ${buildDir}/lambda-s3-graalvm.zip ${buildDir}/distributions/formkiq-core/sam/storage/"
		}
		// build SAM distribution
		exec {
			commandLine "bash", "-c", "cp src/main/resources/cloudformation/template-sar.yaml ${buildDir}/template-sar.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq d src/main/resources/cloudformation/template-sar.yaml 'Metadata' > ${buildDir}/distributions/formkiq-core/sam/storage/template.yaml"
		}
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "sam package --template-file ${buildDir}/template-sar.yaml --s3-bucket ${distrobucket} --region ${testregion} --profile ${testprofile} --output-template-file ${buildDir}/distributions/formkiq-core/sar/storage/template.yaml"
		}
	}
}

graalvmNativeImage.dependsOn check

build.dependsOn assembleTemplate
