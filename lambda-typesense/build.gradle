description = "FormKiQ Core - Lambda TypeSense"

def moduleName = "formkiq-module-lambda-typesense"
def getCmd() {
    String os = System.getProperty("os.name").toLowerCase()
    return os.contains("win") ? "cmd" : "bash"
}

def getCmdParam() {
    String os = System.getProperty("os.name").toLowerCase()
    return os.contains("win") ? "/c" : "-c"
}

dependencies {

 	annotationProcessor group: 'com.formkiq', name: 'graalvm-annotations-processor', version: '1.4.0'
 
	implementation project(':aws-dynamodb')
	implementation project(':dynamodb-documents')
	implementation project(':typesense')
	implementation project(':http')
	
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    
	implementation group: 'com.formkiq', name: 'lambda-runtime-graalvm', version:'2.3.1'
    implementation group: 'com.formkiq', name: 'graalvm-annotations', version: '1.2.0'
    
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.7'
	testImplementation project(':fkq-test-utils')

	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.9.1'
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.18.3'
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.18.3'
    testImplementation group: 'org.testcontainers', name: 'localstack', version: '1.18.3'
}

compileJava {
    options.annotationProcessorPath += configurations.runtimeClasspath
}

nativeImage { 
	outputFileName = "server"
	dockerImage = "ghcr.io/graalvm/graalvm-ce:ol9-java17-22.3.1"
	mainClassName = "com.formkiq.lambda.runtime.graalvm.LambdaRuntime"
    enableHttp = true
    enableHttps = true
    enableStatic = true
	systemProperty = ["java.net.preferIPv4Stack=true"]
}

test {
  failFast = true
  useJUnitPlatform()
}

task buildLambdaZip(type: Zip) {
	dependsOn test, graalvmNativeImage
	inputs.files("${project.projectDir}/runtime/bootstrap", "${buildDir}/graalvm/server")
  outputs.files("${buildDir}/${moduleName}-graalvm.zip")
    
	archiveFileName = "${moduleName}-graalvm.zip"
    destinationDirectory = file("${buildDir}")
    from("${project.projectDir}/runtime") {
        include 'bootstrap'
    }
    from("${buildDir}/graalvm") {
        include 'server'
    }
}

task buildJava11Zip(type: Zip) {
    from compileJava
    into('lib') {
        from configurations.default
    }           
}

task copyLambda(type: Copy) {
  dependsOn buildLambdaZip
  outputs.upToDateWhen {false}
  from buildLambdaZip.outputs.files.singleFile
  into "${buildDir}/distributions/${moduleName}/sam/typesense"
}

task assembleTemplate {
	dependsOn copyLambda
  outputs.upToDateWhen { false }
  
	def randomtext = ('0'..'z').shuffled().take(10).join();
	def sha256 = randomtext.digest('SHA-256')
	
  	doLast {
		exec {
			commandLine getCmd(), getCmdParam(), "ytt --data-value hash=${sha256} -f src/main/resources/cloudformation/typesense/template.yaml > ${buildDir}/distributions/${moduleName}/sam/typesense/template.yaml"
		}
	}
}

buildJava11Zip.dependsOn jar

graalvmNativeImage.dependsOn check
build.dependsOn assembleTemplate
