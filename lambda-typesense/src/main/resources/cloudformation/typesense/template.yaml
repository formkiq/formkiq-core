#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - Typesense
    
Parameters:
  
  Image:
    Type: String
    Description: Version of Typesense to deploy
    Default: "typesense/typesense:0.25.1"
    
  AppEnvironment:
    Type: String
    Description: The Application Environment
    AllowedPattern: ".+"

  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 1024
    MinValue: 128
    MaxValue: 3008
  
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60

  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "enterprise"]

  TypesenseApiKey:
    Type: String
    Description: TypeSense API Key
    
  TypesenseMemory:
    Type: String
    Description: The amount of memory used by Typesense Fargate Container function (GB)
    Default: "1024"
    AllowedValues: ["1024", "2048", "3072", "4096", "5120", "6144", "7168", "8192", "16384", "32768"]

  VpcStackName:
    Type: String
    Description: FormKiQ VPC Stack Name

  ECSCluster:
    Type: String
    Description: Reference to the ECSCluster

  Partition:
    Description: The partition in which the resource is located. A partition is a group of AWS Regions
    Type: String

Mappings: 
  TypesenseMap: 
    "1024": 
      "CPU": "512"
    "2048": 
      "CPU": "1024"
    "3072": 
      "CPU": "1024"
    "4096": 
      "CPU": "2048"
    "5120": 
      "CPU": "2048"
    "6144": 
      "CPU": "2048"
    "7168": 
      "CPU": "2048"
    "8192": 
      "CPU": "4096"
    "16384": 
      "CPU": "8192"
    "32768": 
      "CPU": "16384"

Conditions:
  HasVpcStackName:
    Fn::Not:
      - Fn::Equals: 
        - Ref: VpcStackName
        - ''

  HasTypesenseApiKey:
    Fn::Not:
      - Fn::Equals: 
        - Ref: TypesenseApiKey
        - ''
        
  CreateResources: 
    Fn::And:
      - Condition: HasVpcStackName
      - Condition: HasTypesenseApiKey

  NotCreateResources: 
    Fn::Not:
      - Condition: CreateResources

Resources:

  TypesenseProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateResources
    Properties:
      LogGroupName: 
        Fn::Sub: "/aws/vendedlogs/${AWS::StackName}/${TypesenseProcessor}"
      RetentionInDays: 90
      
  TypesenseProcessor:
    Type: AWS::Serverless::Function
    Condition: CreateResources
    DependsOn:
    - TypesenseLambdaRolePolicy
    Properties:
      Handler: com.formkiq.module.lambda.typesense.TypesenseProcessor
      Description: Lambda function to add DynamoDB records to Typesense
      Runtime: provided
      Timeout: 
        Fn::Sub: "${LambdaTimeout}"
      MemorySize: 
        Fn::Sub: "${LambdaMemory}"
      CodeUri: ./formkiq-module-lambda-typesense-graalvm.zip
      Tracing: Active
      AutoPublishCodeSha256: #@ data.values.hash or assert.fail("missing version")
      Environment:
        Variables:
          APP_ENVIRONMENT: 
            Fn::Sub: "${AppEnvironment}"
          DEBUG: false
          ENABLE_AWS_X_RAY: true
          FormKiQType:
            Ref: FormKiQType
          DOCUMENT_SYNC_TABLE: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentSyncsTableName}}"
          TYPESENSE_HOST:
            Fn::If:
            - CreateResources
            - Fn::GetAtt:
              - ApiGateway
              - ApiEndpoint
            - ""
          TYPESENSE_API_KEY:
            Ref: TypesenseApiKey
      Role: 
        Fn::GetAtt:
        - TypesenseLambdaRole
        - Arn
      Tags:
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  TypesenseProcessorParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateResources
    Properties:
      Description: "Lambda for processing records for Typesense"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/lambda/TypesenseProcessor"
      Type: String
      Value:
        Ref: TypesenseProcessor
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  TypesenseApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateResources
    Properties:
      Description: "Typesense API Endpoint"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/TypesenseEndpoint"
      Type: String
      Value:
        Fn::GetAtt:
          - ApiGateway
          - ApiEndpoint
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  TypesenseApiIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateResources
    Properties:
      Description: "Typesense API ID"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/TypesenseApiId"
      Type: String
      Value:
        Fn::If:
        - CreateResources
        - Fn::GetAtt:
          - ApiGateway
          - ApiId
        - ""
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  TypesenseLambdaRole:
    Type: AWS::IAM::Role
    Condition: CreateResources
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
        - Key: "StackName"
          Value: 
            Fn::Sub: "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      
  TypesenseLambdaRolePolicy: 
    Type: "AWS::IAM::Policy"
    Condition: CreateResources
    Properties: 
      PolicyName: Typesense-lambdarole
      Roles: 
        - 
          Ref: "TypesenseLambdaRole"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource: 
            - Fn::Sub: "arn:${Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}/stream/*"
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:DeleteItem
            Resource:
            - Fn::Sub: "arn:${Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentSyncsTableName}}" 
            
  TypesenseTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Condition: CreateResources
    Properties:
      Enabled: True
      BatchSize: 1
      FilterCriteria:
        Filters:
          - Pattern: '{"dynamodb": {"Keys": {"SK": { "S": ["document"] }}}}'      
      EventSourceArn:
        Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsStreamArn}}"
      FunctionName:
        Fn::GetAtt:
        - TypesenseProcessor
        - Arn      
      StartingPosition: LATEST
      
  Service:
    Type: AWS::ECS::Service
    Condition: CreateResources
    Properties:
      Cluster:
        Ref: ECSCluster
      ServiceName: Typesense
      TaskDefinition: 
        Ref: TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      DesiredCount: 1
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
            - CloudMapService
            - Arn
          Port: 8108
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue:
                  Fn::Sub: '${VpcStackName}-PublicSubnets'
          SecurityGroups:
            - Ref: FargateSecurityGroup

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResources
    Properties:
      GroupDescription: Typesense Security Group
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-Vpc'
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Fn::ImportValue:
              Fn::Sub: '${VpcStackName}-VpcLinkSecurityGroup'
          FromPort: 8108
          ToPort: 8108
          IpProtocol: tcp

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: CreateResources
    Properties:
      Family: Typesense
      Cpu:
        Fn::FindInMap:
          - TypesenseMap
          - Ref: TypesenseMemory
          - CPU      
      Memory:
        Ref: TypesenseMemory
      NetworkMode: awsvpc
      TaskRoleArn:
        Ref: TaskRole
      ExecutionRoleArn: 
        Ref: ExecutionRole
      RequiresCompatibilities: 
        - FARGATE
      Volumes:
        - Name: Typesense
          EFSVolumeConfiguration:
            FilesystemId: 
              Ref: EfsVolume
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: 
            Fn::Sub: "FormKiQ_Typesense_${AppEnvironment}"
          Image: 
            Ref: Image
          Environment:
            - Name: TYPESENSE_DATA_DIR
              Value: /data
            - Name: TYPESENSE_API_KEY
              Value: 
                Ref: TypesenseApiKey
          MountPoints:
            - SourceVolume: Typesense
              ContainerPath: '/data'
              ReadOnly: false
          PortMappings:
            - ContainerPort: 8108
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: "Typsense"
              awslogs-region: 
                Fn::Sub: "${AWS::Region}"
              awslogs-stream-prefix: "typesense"

  CloudMapService:
    Type: AWS::ServiceDiscovery::Service
    Condition: CreateResources
    Properties:
      NamespaceId:
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-CloudMapNamespace'
      Name: 
        Fn::Sub: "FormKiQ_Typesense_${AppEnvironment}"
      DnsConfig:
        DnsRecords:
          - Type: SRV
            TTL: 60
      HealthCheckCustomConfig:
        FailureThreshold: 1

  TaskRole:
    Type: AWS::IAM::Role
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole

  ExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: [ecs-tasks.amazonaws.com]
      ManagedPolicyArns:
        - Fn::Sub: "arn:${Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        -
          PolicyName: 
            Fn::Sub: "${AWS::StackName}-FargateExecutionPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
              
  EfsVolume:
    Type: AWS::EFS::FileSystem
    Condition: CreateResources
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-Typesense"

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Condition: CreateResources
    Properties:
      FileSystemId: 
        Ref: EfsVolume
      SubnetId: 
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-PublicSubnet1'
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-NfsSecurityGroup'

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Condition: CreateResources
    Properties:
      FileSystemId: 
        Ref: EfsVolume
      SubnetId: 
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-PublicSubnet2'
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-NfsSecurityGroup'
          
  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Condition: CreateResources
    Properties:
      FileSystemId: 
        Ref: EfsVolume
      SubnetId: 
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-PublicSubnet3'
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-NfsSecurityGroup'
    
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Condition: CreateResources
    Properties:
      ProtocolType: HTTP
      Name:
        Fn::Sub: "${AWS::StackName} Typesense - ${AppEnvironment}"
      Description: "FormKiQ Typesense API"

  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: CreateResources
    Properties:
      ApiId: 
        Ref: ApiGateway
      ConnectionId:
        Fn::ImportValue:
          Fn::Sub: '${VpcStackName}-VpcLink'
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: 
        Fn::GetAtt:
          - CloudMapService
          - Arn
      PayloadFormatVersion: "1.0"

  StageAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: 
        Fn::Sub: "/aws/vendedlogs/${AWS::StackName}/APITypeSenseAccessLogs"
        
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - ApiGateway
    Condition: CreateResources
    Properties:
      ApiId: 
        Ref: ApiGateway
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: 
          Fn::GetAtt: 
          - StageAccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'

  Route:
    Type: AWS::ApiGatewayV2::Route
    Condition: CreateResources
    Properties:
      ApiId: 
        Ref: ApiGateway
      AuthorizationType: AWS_IAM
      RouteKey: $default
      Target: 
        Fn::Sub: integrations/${Integration}

Outputs:

  CloudMapServiceArn:
    Description: Cloud Map Service
    Value:
      Fn::If:
      - CreateResources
      - Fn::GetAtt:
          - CloudMapService
          - Arn
      - ""
    
  TypesenseApiEndpoint:
    Description: Typesense API Endpoint
    Value:
      Fn::If:
      - CreateResources
      - Fn::GetAtt:
          - ApiGateway
          - ApiEndpoint
      - ""