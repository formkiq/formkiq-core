	
description = "FormKiQ Core - Console"

dependencies {

	implementation project(':aws-s3')
	implementation project(':aws-ssm')
	
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
	implementation group: 'org.json', name: 'json', version: '20200518'
	
    testImplementation group: 'junit', name: 'junit', version:'4.+'
	testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
}

task buildZip(type: Zip) {
	archiveName "console-installer.zip"
    destinationDir(file("${buildDir}/distributions"))
    from compileJava
    from processResources              
    into('lib') {
        from configurations.default
    }           
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/console/awstest/**'
  
  doFirst {
    macroLocalStackStart()
	macroDynamoDbStart()
  }
  
  doLast {
    macroDockerComposeDown()
  }
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  include 'com/formkiq/stacks/console/awstest/**'
  outputs.upToDateWhen {false}    
}

task uploadToS3 {
  outputs.dir("${buildDir}/distributions")
  doLast {
	exec {
	  commandLine "bash", "-c", "aws s3 cp ${buildDir}/distributions/console-installer.zip s3://${distrobucket}/formkiq-core/${project.version}/console-installer.zip --profile ${testprofile}"
	}
  }
}

task assembleTemplate {
    dependsOn buildZip
	inputs.files("*.yaml")
	outputs.files("build/formkiq-core.yaml", "build/formkiq-core-sar.yaml")
	doLast {
		// build SAM distribution
		exec {
			commandLine "bash", "-c", "yq d template-sar.yaml 'Metadata' > template.yaml"
		}
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "sam package --template-file template-sar.yaml --s3-bucket ${distrobucket} --region ${testregion} --profile ${testprofile} --output-template-file build/formkiq-core-sar.yaml"
		}
	}
}

buildZip.dependsOn check
uploadToS3.dependsOn buildZip
build.dependsOn uploadToS3, assembleTemplate