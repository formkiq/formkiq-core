	
description = "FormKiQ Core - Console"

dependencies {

	implementation project(':aws-s3')
	implementation project(':aws-ssm')
	
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
	implementation group: 'org.json', name: 'json', version: '20210307'
	
	testImplementation project(':aws-cognito')
    testImplementation group: 'junit', name: 'junit', version:'4.+'
	testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'	
	
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.8.2'
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version:'5.8.2'
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.17.1'
	
	testImplementation group: 'org.testcontainers', name: 'localstack', version: '1.17.1'
	testImplementation group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.9.3'
}

task buildZip(type: Zip) {
	dependsOn check
	archiveFileName = "console-installer.zip"
    destinationDirectory = file("${buildDir}")
    from compileJava
    from processResources              
    into('lib') {
        from configurations.runtimeClasspath
    }           
}

task buildUnzip(type: Copy) {
  dependsOn buildZip
  def zipFile = file("${buildDir}/console-installer.zip")
  def outputDir = file("${buildDir}/tmp/console")

  from zipTree(zipFile)
  into outputDir
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/console/awstest/**'
  useJUnitPlatform()
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  include 'com/formkiq/stacks/console/awstest/**'
  outputs.upToDateWhen {false}    
}

task assembleTemplate {
    dependsOn buildZip
	inputs.files("src/main/resources/cloudformation/template.yaml", "src/main/resources/cloudformation/template-install.yaml", "src/main/resources/cloudformation/template-users.yaml")
	outputs.dir("${buildDir}/distributions")
	doLast {
		exec {
			commandLine "bash", "-c", "mkdir -p ${buildDir}/distributions/formkiq-core/sam/console"
		}
		exec {
			commandLine "bash", "-c", "cp src/main/resources/cloudformation/template* ${buildDir}/distributions/formkiq-core/sam/console/"
		}
		// build SAM distribution
//		exec {
//			commandLine "bash", "-c", "yq d src/main/resources/cloudformation/template-sar.yaml 'Metadata' > ${buildDir}/distributions/formkiq-core/sam/console/template.yaml"
//		}
		exec {
			commandLine "bash", "-c", "cp ${buildDir}/console-installer.zip ${buildDir}/distributions/formkiq-core/sam/console/"
		}
		// build SAR distribution
		//exec {
		//	commandLine "bash", "-c", "sam package --template-file ${buildDir}/template-sar.yaml --resolve-s3 --region ${testregion} --profile ${testprofile} --output-template-file ${buildDir}/distributions/formkiq-core/sar/console/template.yaml"
		//}
	}
}

build.dependsOn assembleTemplate
