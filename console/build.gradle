	
description = "FormKiQ Core - Console"

dependencies {

	implementation project(':aws-s3')
	implementation project(':aws-ssm')
	
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
	implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
	implementation group: 'org.json', name: 'json', version: '20200518'
	
    testImplementation group: 'junit', name: 'junit', version:'4.+'
	testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
}

task buildZip(type: Zip) {
	archiveName "console-installer.zip"
    destinationDir(file("${buildDir}"))
    from compileJava
    from processResources              
    into('lib') {
        from configurations.default
    }           
}

task buildUnzip(type: Copy) {
  dependsOn buildZip
  def zipFile = file("${buildDir}/console-installer.zip")
  def outputDir = file("${buildDir}/tmp/console")

  from zipTree(zipFile)
  into outputDir
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/console/awstest/**'
  
  doFirst {
    macroLocalStackStart()
	macroDynamoDbStart()
  }
  
  doLast {
    macroDockerComposeDown()
  }
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  include 'com/formkiq/stacks/console/awstest/**'
  outputs.upToDateWhen {false}    
}

/*
task uploadToS3 {
  outputs.dir("${buildDir}")
  doLast {
	exec {
	  commandLine "bash", "-c", "aws s3 cp ${buildDir}/console-installer.zip s3://${distrobucket}/formkiq-core/${project.version}/console-installer.zip --profile ${testprofile}"
	}
  }
}*/

task assembleTemplate {
    dependsOn buildZip
	inputs.files("src/main/resources/cloudformation/template-sar.yaml", "src/main/resources/cloudformation/template-docker-snippet.yaml")
	outputs.dir("${buildDir}/distributions")
	doLast {
		exec {
			commandLine "bash", "-c", "mkdir -p ${buildDir}/distributions/formkiq-core/sam/console && mkdir -p ${buildDir}/distributions/formkiq-core/docker/console && mkdir -p ${buildDir}/distributions/formkiq-core/sar/console"
		}
		// build SAM distribution
		exec {
			commandLine "bash", "-c", "yq d src/main/resources/cloudformation/template-sar.yaml 'Metadata' > ${buildDir}/distributions/formkiq-core/sam/console/template.yaml"
		}
		exec {
			commandLine "bash", "-c", "cp ${buildDir}/console-installer.zip ${buildDir}/distributions/formkiq-core/sam/console/"
		}
		exec {
			commandLine "bash", "-c", "yq m ${buildDir}/distributions/formkiq-core/sam/console/template.yaml src/main/resources/cloudformation/template-docker-snippet.yaml > ${buildDir}/distributions/formkiq-core/docker/console/template.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq d -i ${buildDir}/distributions/formkiq-core/docker/console/template.yaml 'Resources.ConsoleInstaller.Properties.CodeUri'"
		}
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "sam package --template-file src/main/resources/cloudformation/template-sar.yaml --s3-bucket ${distrobucket} --region ${testregion} --profile ${testprofile} --output-template-file ${buildDir}/distributions/formkiq-core/sar/console/template.yaml"
		}
	}
}

task buildDockerImage {
  dependsOn buildUnzip
  inputs.files("Dockerfile", "src/main")
  doLast {
	exec {
	  commandLine "bash", "-c", "docker build -t formkiq-core-console ."
	}
  }
}

task dockerpush {
  dependsOn buildDockerImage
  outputs.upToDateWhen {false}
  doLast {
	exec {
	  commandLine "bash", "-c", "aws ecr-public get-login-password --region ${testregion} --profile ${testprofile} | docker login --username AWS --password-stdin public.ecr.aws/n3i8r5o8"
	}
	exec {
	  commandLine "bash", "-c", "docker tag formkiq-core-console:latest public.ecr.aws/n3i8r5o8/formkiq-core-console:${project.version}"
	}
	exec {
	  commandLine "bash", "-c", "docker push public.ecr.aws/n3i8r5o8/formkiq-core-console:${project.version}"
	}
  }  
}

buildZip.dependsOn check
//uploadToS3.dependsOn buildZip
build.dependsOn /*uploadToS3,*/ assembleTemplate