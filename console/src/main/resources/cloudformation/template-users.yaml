AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - Console
        
Parameters:

  AdminEmail:
    Type: String
    Description: Administrator Email
    AllowedPattern: ".+"
    
  AppEnvironment:
    Type: String
    Description: The Document Stack Environment
    AllowedPattern: ".+"
              
  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "enterprise"]

  CognitoUserPool:
    Type: String
    Description: The Cognito User Pool Id
    AllowedPattern: ".+"

  CognitoUserPoolArn:
    Type: String
    Description: The Cognito User Pool Arn
    AllowedPattern: ".+"

  CognitoIdentityPool:
    Type: String
    Description: Cognito Identity Pool Id
    AllowedPattern: ".+"

  CognitoUserPoolClient:
    Type: String
    Description: Cognito User Pool Client
    AllowedPattern: ".+"    

  Partition:
    Description: The partition in which the resource is located. A partition is a group of AWS Regions
    Type: String

  IsGovCloud:
    Description: Is Installation AWS Region gov cloud
    Type: String
    AllowedValues: ["true", "false"]

Conditions:
        
  IsNotGovCloud:
    Fn::Equals: 
      - Ref: IsGovCloud
      - 'false'
      
Resources:

  ConsoleAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Condition: IsNotGovCloud
    Properties:
      DesiredDeliveryMediums: 
        - EMAIL
      Username: 
        Fn::Sub: "${AdminEmail}"
      UserPoolId: 
        Ref: CognitoUserPool
      UserAttributes:
        - Name: email
          Value: 
            Fn::Sub: "${AdminEmail}"
        - Name: email_verified
          Value: "true"

  ConsoleAddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Condition: IsNotGovCloud
    DependsOn:
    - ConsoleAdminUser
    Properties: 
      GroupName: 
        Ref: AdminGroup
      Username: 
        Fn::Sub: "${AdminEmail}"
      UserPoolId: 
        Ref: CognitoUserPool

  ConsoleAddUserToDefaultGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Condition: IsNotGovCloud
    DependsOn:
    - ConsoleAdminUser
    - DefaultGroup
    Properties: 
      GroupName: "default"
      Username: 
        Fn::Sub: "${AdminEmail}"
      UserPoolId: 
        Ref: CognitoUserPool
      
  ConsoleAdminEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Console Admin Email"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/console/AdminEmail"
      Type: String
      Value: 
        Ref: AdminEmail
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  AdminGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "Admins"
      Description: "Administrator group access"
      RoleArn: 
        Fn::GetAtt:
        - AdminGroupRole
        - Arn
      UserPoolId: 
        Ref: CognitoUserPool
        
  AuthenticationOnlyGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "authentication_only"
      Description: "Authentication only group access"
      UserPoolId: 
        Ref: CognitoUserPool
  
  AdminGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/cognito/AdminGroup"
      Type: String
      Value: 
        Ref: AdminGroup
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  AdminGroupRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group Role"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/AdminGroupRole"
      Type: String
      Value: 
        Ref: AdminGroupRole
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  AdminGroupRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito Admin Group Role"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/AdminGroupRoleArn"
      Type: String
      Value: 
        Fn::GetAtt: 
        - AdminGroupRole
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  AdminGroupRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
        - Key: "StackName"
          Value: 
            Fn::Sub: "${AWS::StackName}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - Ref: CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"      
      Policies: 
        - 
          PolicyName: 
            Fn::Sub: "${AWS::StackName}-AdminGroupRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: "*"            
              - Effect: "Allow"
                Action:
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminListGroupsForUser
                - cognito-idp:AdminRemoveUserFromGroup
                - cognito-idp:AdminResetUserPassword
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                Resource: 
                  Ref: CognitoUserPoolArn
              - Effect: "Allow"
                Action:
                - cognito-identity:DescribeIdentityPool
                - cognito-identity:GetIdentityPoolRoles
                - cognito-identity:SetIdentityPoolRoles
                - iam:PassRole
                Resource: "*"
                  
  DefaultGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default"
      Description: "Read/Write access to the 'default' site id"
      UserPoolId: 
        Ref: CognitoUserPool

  DefaultReadGroup:
    Type: "AWS::Cognito::UserPoolGroup"    
    Properties:
      Precedence: 0
      GroupName: "default_read"
      Description: "Read only access to the 'default' site id"
      UserPoolId: 
        Ref: CognitoUserPool
                      
  CognitoNoAccessRole: 
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
        - Key: "StackName"
          Value: 
            Fn::Sub: "${AWS::StackName}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: 
                - Ref: CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr:
                - "authenticated"
      Path: "/"
      Policies: 
        - PolicyName: 
            Fn::Sub: "${AWS::StackName}-CognitoNoAccessRole"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Deny"
                Action: [ "*" ]
                Resource: "*"

  CognitoIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: 
        Ref: CognitoIdentityPool
      RoleMappings:
        cognitoProvider:
          IdentityProvider:
            Fn::Join:
            - ''
            - - "cognito-idp."
              - Fn::Sub: "${AWS::Region}"
              - ".amazonaws.com/"
              - Ref: CognitoUserPool
              - ":"
              - Ref: CognitoUserPoolClient          
          Type: Token
          AmbiguousRoleResolution: Deny
      Roles:
        authenticated: 
          Fn::GetAtt:
          - CognitoNoAccessRole
          - Arn
        unauthenticated: 
          Fn::GetAtt: 
          - CognitoNoAccessRole
          - Arn
Outputs:
  AdminGroupRoleArn:
    Value: 
      Fn::GetAtt: 
      - AdminGroupRole
      - Arn