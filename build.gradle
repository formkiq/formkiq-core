
plugins {
  id 'java-library'
  id 'checkstyle'
  id 'com.github.spotbugs'  version '5.0.14'
  id 'com.diffplug.spotless' version '6.19.0'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'com.formkiq.gradle.graalvm-native-plugin' version '1.5.1'
  id 'de.undercouch.download' version '5.4.0'
  id 'org.openapi.generator' version '6.6.0'
}

def moduleName = "formkiq-core"

def getCmd() {
    String os = System.getProperty("os.name").toLowerCase()
    return os.contains("win") ? "cmd" : "bash"
}

def getCmdParam() {
    String os = System.getProperty("os.name").toLowerCase()
    return os.contains("win") ? "/c" : "-c"
}

repositories { mavenCentral() }

allprojects {
  version = '1.12.0'
  ext.awsCognitoVersion = '1.5.1'
  group = 'com.formkiq.stacks'
  
	apply plugin: 'com.diffplug.spotless'
  
	java {
		toolchain {
			languageVersion.set(JavaLanguageVersion.of(11))
		}
	}
  
	spotless { 
	  java { 
	    eclipse().configFile project.rootProject.file("spotless.eclipseformat.xml")
	    licenseHeaderFile project.rootProject.file("LICENSE")  
	  } 
	}
	
	spotlessJavaCheck.dependsOn 'spotlessJavaApply'
}

subprojects {

  repositories {
  	mavenLocal()
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
  }

  apply plugin: 'java-library'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'com.formkiq.gradle.graalvm-native-plugin'
  
  sourceCompatibility = "11"
  targetCompatibility = "11"
  
  compileJava.dependsOn 'spotlessCheck'

  tasks.withType(Test) {
    systemProperties['testregion'] = project.getProperty('testregion')
    systemProperties['testprofile'] = project.getProperty('testprofile')
    systemProperties['testappenvironment'] = project.getProperty('testappenvironment')
    systemProperties['testchatgptapikey'] = project.getProperty('testchatgptapikey')
  }

  spotbugs {
    excludeFilter = file("$rootDir/config/gradle/spotbugs-exclude.xml")
  }
     
  spotbugsMain {
    reports {
        html {
            enabled = true
        }
    }
  } 
  
  spotbugsTest {
    reports {
        html {
            enabled = true
        }
    }
  } 
  
  checkstyle {
    toolVersion '8.45.1'
    configFile file("config/checkstyle/checkstyle.xml")
    configProperties = [project_loc: "${projectDir}"]
    maxWarnings = 0
    maxErrors = 0
  }

}

description = "FormKiQ Core"

task buildDistribution(type: Copy) {
	dependsOn subprojects.build
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	outputs.upToDateWhen {false}

    from 'console/build/distributions/formkiq-core'
    from 'lambda-api/build/distributions/formkiq-core'
    from 'lambda-s3/build/distributions/formkiq-core'
    from 'lambda-typesense/build/distributions/formkiq-module-lambda-typesense'
    from 'lambda-ocr-tesseract/build/distributions/formkiq-core'
    from 'module-email-notify/build/distributions/formkiq-core'
    from 'websocket-api/build/distributions/formkiq-core'
    from 'lambda-apikey-authorizer/build/distributions/formkiq-core'
    into "${buildDir}/distributions/formkiq-core"
}

task assembleTemplate {
    dependsOn buildDistribution
  	outputs.upToDateWhen { false }
	doLast {
		copy {
		  from layout.buildDirectory.dir("${buildDir}/../src/main/resources/cloudformation")
		  include "*"
	      into "${buildDir}/distributions/formkiq-core/sam"
	    }
		exec {
			commandLine getCmd(), getCmdParam(), "ytt --data-value version=${project.version} -f ${buildDir}/distributions/formkiq-core/sam/template.yaml --output-files ${buildDir}/distributions/formkiq-core/sam"
		}	
	}
}

check.dependsOn ':buildSamZip'

task buildSamZip(type: Zip) {
	dependsOn assembleTemplate
	outputs.upToDateWhen { false }
	archiveFileName = "formkiq-core-${project.version}.zip"
    destinationDirectory = file("${buildDir}/distributions/formkiq-core")
   	from("${buildDir}/distributions/formkiq-core/sam") {
   		include '*'
      include '**/**'
    }
	from("${projectDir}") {
   		include 'INSTALL.md'
   		include 'LICENSE'
   		include 'openapi-jwt.yaml'
   		include 'openapi-iam.yaml'
    } 
}

task validateOpenApiJwtSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
    inputSpec = "$rootDir/docs/openapi/openapi-jwt.yaml".toString()
    recommend = true
}

task validateOpenApiIamSpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
    inputSpec = "$rootDir/docs/openapi/openapi-iam.yaml".toString()
    recommend = true
}

task validateOpenApiKeySpec(type: org.openapitools.generator.gradle.plugin.tasks.ValidateTask){
    inputSpec = "$rootDir/docs/openapi/openapi-key.yaml".toString()
    recommend = true
}

task validateOpenApiSpecs(dependsOn: ['validateOpenApiJwtSpec', 'validateOpenApiIamSpec', 'validateOpenApiKeySpec'])

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/docs/openapi/openapi-jwt.yaml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.formkiq.springboot.api")
    invokerPackage.set("com.formkiq.springboot.invoker")
    modelPackage.set("com.formkiq.springboot.model")
}