AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ - VPC

Parameters:

  VpcId:
    Description: "The ID of the existing VPC (leave blank to create new vpc)"
    Type: String

  PublicSubnet1Id:
    Type: String
    Description: Public Subnet 1 ID (starts with 'subnet-')

  PublicSubnet2Id:
    Type: String
    Description: Public Subnet 2 ID (starts with 'subnet-')

  PublicSubnet3Id:
    Type: String
    Description: Public Subnet 3 ID (starts with 'subnet-')

  PrivateSubnet1Id:
    Type: String
    Description: Private Subnet 1 ID (starts with 'subnet-')

  PrivateSubnet2Id:
    Type: String
    Description: Private Subnet 2 ID (starts with 'subnet-')

  PrivateSubnet3Id:
    Type: String
    Description: Private Subnet 3 ID (starts with 'subnet-')

  EnableVpcEndpoints:
    Description: Enable VPC Endpoints (S3, Dynamodb, SNS, SMS, Execute-Api) set to 'true' if using Opensearch
    Default: "false"
    Type: String
    AllowedValues: ["false", "true"]

  EnableVpcLinks:
    Description: Enable VPC Links (needed for Typesense)
    Default: "false"
    Type: String
    AllowedValues: ["false", "true"]

  PrivateRouteTableId:
    Type: CommaDelimitedList
    Description: Private Route Table ID (starts with 'rtb-')

Conditions:

  IsEnableVpcEndpoints:
    Fn::Equals:
      - Ref: EnableVpcEndpoints
      - 'true'

  IsEnableVpcLinks:
    Fn::Equals:
      - Ref: EnableVpcLinks
      - 'true'

  UseTwoSubnets:
    Fn::Equals:
      - Ref: "AWS::Region"
      - "ca-central-1"

  UseThreeSubnets:
    Fn::Not:
      - Condition: UseTwoSubnets

Resources:

  CloudMapNamespace:
    Condition: IsEnableVpcLinks
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc:
        Ref: VpcId
      Name: "formkiq-vpc"

  VpcLink:
    Condition: IsEnableVpcLinks
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: vpclink
      SecurityGroupIds:
        - Ref: VpcLinkSecurityGroup
      SubnetIds:
        - Ref: PrivateSubnet1Id
        - Ref: PrivateSubnet2Id
        - Fn::If:
            - UseTwoSubnets
            - Ref: "AWS::NoValue"
            - Ref: PrivateSubnet3Id

  VpcLinkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsEnableVpcLinks
    Properties:
      GroupDescription: FormKiQ VPC Link
      VpcId:
        Ref: VpcId
      SecurityGroupIngress: []

  HttpsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group which allows HTTPS access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: FormKiQ

  NfsSecurityGroup:
    Condition: IsEnableVpcLinks
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group which allows NFS access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: FormKiQ

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableVpcEndpoints
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        Ref: PrivateRouteTableId
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.s3'
      VpcId:
        Ref: VpcId

  DynamoDbGatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableVpcEndpoints
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        Ref: PrivateRouteTableId
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId:
        Ref: VpcId

  SnsInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.sns'
      VpcId:
        Ref: VpcId

  SsmInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableVpcEndpoints
    Properties:
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.ssm'
      VpcId:
        Ref: VpcId

  ExecuteApiInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableVpcEndpoints
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId:
        Ref: VpcId

Outputs:
  Vpc:
    Description: "VPC Id"
    Value:
      Ref: VpcId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Vpc"
  PublicSubnet1:
    Description: "Public Subnet 1"
    Value:
      Ref: PublicSubnet1Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: "Public Subnet 2"
    Value:
      Ref: PublicSubnet2Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
  PublicSubnet3:
    Condition: UseThreeSubnets
    Description: "Public Subnet 3"
    Value:
      Ref: PublicSubnet3Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3"
  PrivateSubnet1:
    Description: "Private Subnet 1"
    Value:
      Ref: PrivateSubnet1Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Description: "Private Subnet 2"
    Value:
      Ref: PrivateSubnet2Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
  PrivateSubnet3:
    Condition: UseThreeSubnets
    Description: "Private Subnet 3"
    Value:
      Ref: PrivateSubnet3Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3"
  HttpsSecurityGroup:
    Description: Security Group which allows HTTPS access
    Value:
      Ref: HttpsSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-HttpsSecurityGroup"
  NfsSecurityGroup:
    Condition: IsEnableVpcLinks
    Description: Security Group which allows NFS access
    Value:
      Ref: NfsSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NfsSecurityGroup"
  PublicSubnets:
    Description: "VPC Public Subnets"
    Value:
      Fn::If:
        - UseThreeSubnets
        - Fn::Join:
            - ","
            - - Ref: PublicSubnet1Id
              - Ref: PublicSubnet2Id
              - Ref: PublicSubnet3Id
        - Fn::Join:
            - ","
            - - Ref: PublicSubnet1Id
              - Ref: PublicSubnet2Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnets"
  PrivateSubnets:
    Description: "VPC Private Subnets"
    Value:
      Fn::If:
        - UseThreeSubnets
        - Fn::Join:
            - ","
            - - Ref: PrivateSubnet1Id
              - Ref: PrivateSubnet2Id
              - Ref: PrivateSubnet3Id
        - Fn::Join:
            - ","
            - - Ref: PrivateSubnet1Id
              - Ref: PrivateSubnet2Id
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnets"
  CloudMapNamespace:
    Condition: IsEnableVpcLinks
    Description: "Cloud Map Name Space"
    Value:
      Ref: CloudMapNamespace
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CloudMapNamespace"
  VpcLink:
    Condition: IsEnableVpcLinks
    Description: "ApiGatewayV2 VPC Link"
    Value:
      Ref: VpcLink
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcLink"
  VpcLinkSecurityGroup:
    Condition: IsEnableVpcLinks
    Description: "VPC Link Security Group"
    Value:
      Ref: VpcLinkSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcLinkSecurityGroup"
