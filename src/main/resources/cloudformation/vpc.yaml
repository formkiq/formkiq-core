AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ - VPC
    
Parameters:

  VpcLabel:
    Type: String
    Description: A Label for the VPC
    AllowedPattern: ".+"
    Default: "formkiq"
    
  VpcCidr:
    Type: String
    Description: VPC CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Description: Public Subnet1 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.1.0/24
    
  PublicSubnet2Cidr:
    Type: String
    Description: Public Subnet2 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.2.0/24

  PublicSubnet3Cidr:
    Type: String
    Description: Public Subnet3 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.3.0/24

  PrivateSubnet1Cidr:
    Type: String
    Description: Private Subnet1 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.10.0/24

  PrivateSubnet2Cidr:
    Type: String
    Description: Private Subnet2 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.20.0/24
    
  PrivateSubnet3Cidr:
    Type: String
    Description: Public Subnet3 CIDR block
    AllowedPattern: "^[0-9./\\s]*"
    Default: 10.1.30.0/24

  EnableEnterpriseFeatures:
    Description: Enable Enterprise VPC features
    Default: "false"
    Type: String
    AllowedValues: ["false", "true"]
    
Conditions:
  IsEnableEnterpriseFeatures: 
    Fn::Equals: 
    - Ref: EnableEnterpriseFeatures
    - 'true'
    
Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway
      
  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc:
        Ref: Vpc
      Name: 
        Ref: VpcLabel

  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: vpclink
      SecurityGroupIds:
        - Ref: VpcLinkSecurityGroup
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3

  VpcLinkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: FormKiQ VPC Link
      VpcId: 
        Ref: Vpc
      SecurityGroupIngress: []
        
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 
            Ref: VpcLabel
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PublicSubnet1 (${PublicSubnet1Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"      
 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PublicSubnet2 (${PublicSubnet2Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"      

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      CidrBlock:
        Ref: PublicSubnet3Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PublicSubnet3 (${PublicSubnet3Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
            
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock:
        Ref: PrivateSubnet1Cidr
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PrivateSubnet1 (${PrivateSubnet1Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
            
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock:
        Ref: PrivateSubnet2Cidr
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PrivateSubnet2 (${PrivateSubnet2Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
            
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: Vpc
      CidrBlock:
        Ref: PrivateSubnet3Cidr
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: "FormKiQ PrivateSubnet3 (${PrivateSubnet3Cidr})"
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PubliceSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
        
  PubliceSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
        
  PubliceSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
                    
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: Vpc
      Tags:
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
            
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: Vpc
      Tags:
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
            
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PrivateSubnet1
      RouteTableId: 
        Ref: PrivateRouteTable
        
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PrivateSubnet2
      RouteTableId: 
        Ref: PrivateRouteTable
        
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: PrivateSubnet3
      RouteTableId: 
        Ref: PrivateRouteTable

  HttpsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group which allows HTTPS access
      VpcId: 
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"
        
  NfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group which allows NFS access
      VpcId: 
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: FormKiQ
        - Key: StackName
          Value: 
            Fn::Sub: "${AWS::StackName}"

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableEnterpriseFeatures
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - Ref: PrivateRouteTable      
      ServiceName: 
        Fn::Sub: 'com.amazonaws.${AWS::Region}.s3'
      VpcId:
        Ref: Vpc
        
  DynamoDbGatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableEnterpriseFeatures
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - Ref: PrivateRouteTable      
      ServiceName: 
        Fn::Sub: 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId:
        Ref: Vpc

  SnsInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableEnterpriseFeatures
    Properties:
      VpcEndpointType: Interface      
      ServiceName: 
        Fn::Sub: 'com.amazonaws.${AWS::Region}.sns'
      VpcId:
        Ref: Vpc

  SsmInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableEnterpriseFeatures
    Properties:
      VpcEndpointType: Interface      
      ServiceName: 
        Fn::Sub: 'com.amazonaws.${AWS::Region}.ssm'
      VpcId:
        Ref: Vpc

  ExecuteApiInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsEnableEnterpriseFeatures
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface      
      ServiceName: 
        Fn::Sub: 'com.amazonaws.${AWS::Region}.execute-api'
      VpcId:
        Ref: Vpc
        
Outputs:
  Vpc:
    Description: "VPC Id"
    Value:
      Ref: Vpc
    Export:
      Name: 
        Fn::Sub: "${AWS::StackName}-Vpc"
  PublicSubnet1:
    Description: "Public Subnet 1"
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: "Public Subnet 2"
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
  PublicSubnet3:
    Description: "Public Subnet 3"
    Value:
      Ref: PublicSubnet3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3"
  PrivateSubnet1:
    Description: "Private Subnet 1"
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Description: "Private Subnet 2"
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
  PrivateSubnet3:
    Description: "Private Subnet 3"
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3"
  HttpsSecurityGroup:
    Description: Security Group which allows HTTPS access
    Value:
      Ref: HttpsSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-HttpsSecurityGroup"
  NfsSecurityGroup:
    Description: Security Group which allows NFS access
    Value:
      Ref: NfsSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NfsSecurityGroup"
  PublicSubnets:
    Description: "VPC Public Subnets"
    Value: 
      Fn::Join:
      - ","
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnets"
  PrivateSubnets:
    Description: "VPC Private Subnets"
    Value: 
      Fn::Join:
      - ","
      - - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnets"
  CloudMapNamespace:
    Description: "Cloud Map Name Space"
    Value: 
      Ref: CloudMapNamespace
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CloudMapNamespace"
  VpcLink:
    Description: "ApiGatewayV2 VPC Link"
    Value: 
      Ref: VpcLink
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcLink"
  VpcLinkSecurityGroup:
    Description: "VPC Link Security Group"
    Value: !Ref VpcLinkSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VpcLinkSecurityGroup"
