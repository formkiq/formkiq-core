#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: #@ "FormKiQ Core " + data.values.version or assert.fail("missing version")
        
Parameters:

  AdminEmail:
    Type: String
    Description: Administrator Email (required)
    AllowedPattern: ".+"

  AppEnvironment:
    Type: String
    Description: Unique Application Environment Identifier, IE dev/staging/prod
    AllowedPattern: "[a-zA-Z0-9_.-/]+"
    Default: prod
  
  EnablePublicUrls:
    Description: Enables /public urls (unauthenticated urls)
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length for FormKiQ Cognito Users
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Whether FormKiQ Cognito Users password requires at least one lowercase letter
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Whether FormKiQ Cognito Users password requires at least one number
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Whether FormKiQ Cognito Users password requires at least one symbol
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Whether FormKiQ Cognito Users password requires at least one uppercase letter
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]

  VpcStackName:
    Type: String
    Description: >
      The name of the CloudFormation VPC stack that can be created after the initial FormKiQ install, using the add-on CloudFormation template for VPC https://docs.formkiq.com/docs/getting-started/quick-start#create-vpc.
      Some services such as Typesense, Tesseract, and OpenSearch require a VPC. Only required if you are using any of these services; otherwise, this can remain empty.
    Default: ""

  TypesenseApiKey:
    Type: String
    Description: (optional) Random string of characters for https://typesense.org API access 
    Default: ""

  TypesenseMemory:
    Type: String
    Description: The amount of memory used by Typesense (GB). (Suggested to be 2-3 times the size of your data)
    Default: "1024"
    AllowedValues: ["1024", "2048", "3072", "4096", "5120", "6144", "7168", "8192", "16384", "32768"]
    
  CapacityProvider:
    Description: AWS Fargate capacity provider to use, either the FARGATE or FARGATE_SPOT 
    Default: "FARGATE_SPOT"
    Type: String
    AllowedValues: ["FARGATE_SPOT", "FARGATE"]

Mappings: 
  RegionMap: 
    us-east-2:
      PARTITION: "aws"
    us-east-1:
      PARTITION: "aws"
    us-west-1:
      PARTITION: "aws"
    us-west-2:
      PARTITION: "aws"
    af-south-1:
      PARTITION: "aws"
    ap-east-1:
      PARTITION: "aws"
    ap-south-2:
      PARTITION: "aws"
    ap-southeast-3:
      PARTITION: "aws"
    ap-southeast-4:
      PARTITION: "aws"
    ap-south-1:
      PARTITION: "aws"
    ap-northeast-3:
      PARTITION: "aws"
    ap-northeast-2:
      PARTITION: "aws"
    ap-southeast-1:
      PARTITION: "aws"
    ap-southeast-2:
      PARTITION: "aws"
    ap-northeast-1:
      PARTITION: "aws"
    ca-central-1:
      PARTITION: "aws"
    eu-central-1:
      PARTITION: "aws"
    eu-west-1:
      PARTITION: "aws"
    eu-west-2:
      PARTITION: "aws"
    eu-south-1:
      PARTITION: "aws"
    eu-west-3:
      PARTITION: "aws"
    eu-south-2:
      PARTITION: "aws"
    eu-north-1:
      PARTITION: "aws"
    eu-central-2:
      PARTITION: "aws"
    il-central-1:
      PARTITION: "aws"
    me-south-1:
      PARTITION: "aws"
    me-central-1:
      PARTITION: "aws"
    sa-east-1:
      PARTITION: "aws"
    us-gov-east-1:
      PARTITION: "aws-us-gov"
    us-gov-west-1:
      PARTITION: "aws-us-gov"
      
Conditions:

  HasTypesenseApiKey:
    Fn::Not:
      - Fn::Equals: 
        - Ref: TypesenseApiKey
        - ''

  IsGovCloud:
    Fn::Or:
      - Fn::Equals:
          - Ref: AWS::Region
          - us-gov-west-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-gov-east-1

Resources:

  EditionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "FormKiQ Edition"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/edition"
      Type: String
      Value: "core"
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  VersionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "FormKiQ Version"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/version"
      Type: String
      Value: #@ data.values.version or assert.fail("missing version")
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
      
  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Installation Region"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/region"
      Type: String
      Value: 
        Ref: "AWS::Region"
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CoreStorage:
    Type: AWS::Serverless::Application
    Properties:
      Location: storage/template.yaml
      Parameters:
        TypesenseApiKey:
          Ref: TypesenseApiKey
        VpcStackName:
          Ref: VpcStackName
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CoreConsole:
    Type: AWS::Serverless::Application
    Properties:
      Location: console/template.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        AdminEmail: 
          Ref: AdminEmail
        IsGovCloud:
          Fn::If:
          - IsGovCloud
          - "true"
          - "false"
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CoreConsoleInstall:
    Type: AWS::Serverless::Application
    DependsOn:
      - CoreApi
      - Cognito
    Properties:
      Location: console/template-install.yaml
      Parameters:
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        IsGovCloud:
          Fn::If:
          - IsGovCloud
          - "true"
          - "false"
        AppEnvironment: 
          Ref: AppEnvironment
        ConsoleVersion: 
          Fn::GetAtt: 
          - CoreConsole
          - Outputs.ConsoleVersion
        ConsoleBucket: 
          Fn::GetAtt: 
          - CoreConsole
          - Outputs.ConsoleBucket
        ApiUrl: 
          Fn::GetAtt: 
          - CoreApi
          - Outputs.DocumentsHttpApiUrl
        WebsocketApiUrl: 
          Fn::GetAtt: 
          - WebsocketApi
          - Outputs.WebsocketApiUrl
        AuthApiUrl: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.ApiEndpoint
        AllowAdminCreateUserOnly: "true"
        CognitoHostedUi:
          Fn::GetAtt:
          - Cognito
          - Outputs.CognitoHostedUi
        CognitoUserPoolId:
          Fn::GetAtt:
          - Cognito
          - Outputs.CognitoUserPoolId
        CognitoUserPoolClientId:
          Fn::GetAtt:
          - Cognito
          - Outputs.CognitoUserPoolClientId
        CognitoConfigBucket:
          Fn::GetAtt:
          - Cognito
          - Outputs.CognitoConfigBucket
        Domain:
          Fn::GetAtt:
          - Cognito
          - Outputs.Domain
        HostedZoneId:
          Fn::GetAtt:
          - CoreConsole
          - Outputs.HostedZoneId
        CloudFrontDistributionDomainName: 
          Fn::GetAtt:
          - CoreConsole
          - Outputs.CloudFrontDistributionDomainName                       
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  Cognito:
    Type: AWS::Serverless::Application
    DependsOn:
      - CoreConsole
    Properties:
      Location: cognito/template.yaml
      Parameters:
        UserPoolName: 
          Fn::Sub: "${AWS::StackName}-${AppEnvironment}"
        AllowAdminCreateUserOnly: "true"
        PasswordMinimumLength: 
          Fn::Sub: "${PasswordMinimumLength}"
        PasswordRequireLowercase: 
          Fn::Sub: "${PasswordRequireLowercase}"
        PasswordRequireNumbers: 
          Fn::Sub: "${PasswordRequireNumbers}"
        PasswordRequireSymbols: 
          Fn::Sub: "${PasswordRequireSymbols}"
        PasswordRequireUppercase: 
          Fn::Sub: "${PasswordRequireUppercase}"
        Domain: 
          Fn::Sub: "${AppEnvironment}${AWS::AccountId}"
        AwsArnPartition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        RedirectUrl:
          Fn::GetAtt:
          - CoreConsole
          - Outputs.ConsoleUrl
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
        
  SsmProperties:
    Type: AWS::Serverless::Application
    DependsOn:
      - Cognito
    Properties:
      Location: ./ssm-template.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        CognitoUserPool: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolId
        CognitoUserPoolArn: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolArn
        CognitoUserPoolClient: 
          Fn::GetAtt:
          - Cognito
          - Outputs.CognitoUserPoolClientId
        CognitoIdentityPool: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoIdentityPoolId
        Domain: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.Domain
        
  CoreApi:
    Type: AWS::Serverless::Application
    DependsOn:
      - Cognito
      - WebsocketApi
      - TypeSenseService
    Properties:
      Location: api/template.yaml
      Parameters:
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        AppEnvironment: 
          Ref: AppEnvironment
        EnablePublicUrls: 
          Ref: EnablePublicUrls
        PasswordMinimumLength: 
          Ref: PasswordMinimumLength
        PasswordRequireLowercase: 
          Ref: PasswordRequireLowercase
        PasswordRequireNumbers: 
          Ref: PasswordRequireNumbers
        PasswordRequireSymbols: 
          Ref: PasswordRequireSymbols
        PasswordRequireUppercase: 
          Ref: PasswordRequireUppercase
        CognitoUserPool: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolId
        CognitoUserPoolClient: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolClientId
        WebsocketSqsQueueUrl: 
          Fn::GetAtt: 
          - WebsocketApi
          - Outputs.SqsQueueUrl
        TypesenseApiKey: 
          Ref: TypesenseApiKey
        TypesenseApiEndpoint:
          Fn::GetAtt:
          - TypeSenseService
          - Outputs.TypesenseApiEndpoint
        VpcStackName:
          Ref: VpcStackName
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CoreConsoleUsers:
    Type: AWS::Serverless::Application
    DependsOn:
      - CoreApi
      - SsmProperties
      - CoreConsoleInstall
    Properties:
      Location: console/template-users.yaml
      Parameters:
        IsGovCloud:
          Fn::If:
          - IsGovCloud
          - "true"
          - "false"
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        AppEnvironment: 
          Ref: AppEnvironment
        AdminEmail: 
          Ref: AdminEmail
        CognitoUserPool: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolId
        CognitoUserPoolArn: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolArn
        CognitoIdentityPool: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoIdentityPoolId
        CognitoUserPoolClient: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolClientId
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  WebsocketApi:
    Type: AWS::Serverless::Application
    DependsOn:
      - Cognito
    Properties:
      Location: websocket-api/template.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        CognitoUserPoolId: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolId
        CognitoUserPoolClientId: 
          Fn::GetAtt: 
          - Cognito
          - Outputs.CognitoUserPoolClientId
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  EcsCluster:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./ecs-cluster.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        TypesenseApiKey:
          Ref: TypesenseApiKey
        VpcStackName:
          Ref: VpcStackName
        CapacityProvider:
          Ref: CapacityProvider
            
  TypeSenseService:
    Type: AWS::Serverless::Application
    DependsOn:
      - EcsCluster
      - CoreStorage
    Properties:
      Location: typesense/template.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Fn::FindInMap:
          - RegionMap
          - Ref: "AWS::Region"
          - PARTITION
        TypesenseApiKey:
          Ref: TypesenseApiKey
        VpcStackName:
          Ref: VpcStackName
        ECSCluster: 
          Fn::GetAtt: 
          - EcsCluster
          - Outputs.ECSCluster
        TypesenseMemory:
          Ref: TypesenseMemory
      Tags:
        Application: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  TypesenseApiKeyParameter:
    Type: AWS::SSM::Parameter
    Condition: HasTypesenseApiKey
    Properties:
      Description: "Typesense API Key"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/typesense/ApiKey"
      Type: String
      Value:      
        Ref: TypesenseApiKey
      Tags:
        Application: 
          Fn::Sub: "FormKiQ Core"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  CognitoApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Cognito API ID"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/CognitoApiId"
      Type: String
      Value:
        Fn::GetAtt: 
        - Cognito
        - Outputs.HttpApi
      Tags:
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  Monitoring:
    Type: AWS::Serverless::Application
    DependsOn:
      - TypeSenseService
      - CoreStorage
      - CoreApi
      - Cognito
    Properties:
      Location: ./monitoring.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
                    
Outputs:
  AppEnvironment:
    Description: Unique Application Environment Identifier, IE dev/staging/prod
    Value: 
      Ref: AppEnvironment
  IamApiUrl:
    Description: "The URL for the API endpoint that uses IAM authorization"
    Value: 
      Fn::GetAtt: 
      - CoreApi
      - Outputs.DocumentsIamApiUrl
  KeyApiUrl:
    Description: "The URL for the API endpoint that uses API Key authorization"
    Value: 
      Fn::GetAtt: 
      - CoreApi
      - Outputs.DocumentsKeyApiUrl
  HttpApiUrl:
    Description: "The URL for the API endpoint that uses Cognito authorization"
    Value: 
      Fn::GetAtt: 
      - CoreApi
      - Outputs.DocumentsHttpApiUrl
  WebsocketApiUrl:
    Description: "The URL for the Websocket API endpoint"
    Value: 
      Fn::GetAtt: 
      - WebsocketApi
      - Outputs.WebsocketApiUrl    
  ConsoleUrl:
    Description: The URL for the FormKiQ Console
    Value: 
      Fn::GetAtt: 
      - CoreConsole
      - Outputs.ConsoleUrl
  ConsoleS3Bucket:
    Description: The Console S3 Bucket
    Value: 
      Fn::GetAtt: 
      - CoreConsole
      - Outputs.ConsoleBucket
  CognitoUserPoolId:
    Description: "The Cognito User Pool Id"
    Value: 
      Fn::GetAtt: 
      - Cognito
      - Outputs.CognitoUserPoolId
  CognitoUserPoolArn:
    Description: "The Cognito User Pool Arn"
    Value: 
      Fn::GetAtt: 
      - Cognito
      - Outputs.CognitoUserPoolArn
  CognitoClientId:
    Description: "The Cognito Client Id"
    Value: 
      Fn::GetAtt: 
      - Cognito
      - Outputs.CognitoUserPoolClientId
  FormKiQVersion:
    Description: "The FormKiQ Version"
    Value: #@ data.values.version or assert.fail("missing version")
  SnsDocumentEventArn:
    Description: SNS Topic for Document Events
    Value: 
      Fn::GetAtt: 
      - CoreStorage
      - Outputs.SnsDocumentEventArn
  CognitoApiEndpoint:
    Description: The Cognito Login API endpoint
    Value: 
      Fn::GetAtt: 
      - Cognito
      - Outputs.ApiEndpoint
  DocumentsS3Buckets:
    Description: Documents Bucket.
    Value: 
      Fn::GetAtt: 
      - CoreStorage
      - Outputs.DocumentsS3Buckets
  DocumentsStageS3Bucket:
    Description: Documents Staging Bucket.
    Value: 
      Fn::GetAtt: 
      - CoreStorage
      - Outputs.DocumentsStageS3Bucket
      
  TypesenseApiEndpoint:
    Description: Typesense API endpoint
    Value:
      Fn::GetAtt:
      - TypeSenseService
      - Outputs.TypesenseApiEndpoint