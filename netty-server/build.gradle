plugins {
  id("com.palantir.docker") version "0.35.0"
  id "com.palantir.docker-run" version "0.35.0"
}

description = "Netty Server"

sourceSets {
    integration {
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

dependencies {
		
	implementation project(':lambda-s3')
	implementation project(':lambda-api')
	implementation project(':lambda-typesense')
	implementation group: 'io.netty', name: 'netty-all', version: '4.1.96.Final'	
	implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
	implementation group: 'io.minio', name: 'minio', version: '8.5.5'
	implementation group: 'software.amazon.awssdk', name: 'dynamodb', version: '2.20.140'
	
	testImplementation project(':fkq-test-utils')
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.10.0'
	testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.19.0'
}

test {
  failFast = true
  useJUnitPlatform()  
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnitPlatform()
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into "$buildDir/libs"
}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
      'Main-Class': 'com.formkiq.server.HttpServer'
    )
  }
}

task prepareDockerfileTemplate(type: Copy) {
    from "src/main/resources/docker"
    include "Dockerfile"
    filter { it.replaceAll('<%=version%>', project.version) }
    into "$buildDir/dockerfile/"
}

dockerPrepare.dependsOn copyLibs,jar,prepareDockerfileTemplate
dockerfileZip.dependsOn prepareDockerfileTemplate

docker {
	dependsOn prepareDockerfileTemplate
    name "formkiq/api-server:${project.version}-SNAPSHOT"
    files "$buildDir/libs/"
    dockerfile file("$buildDir/dockerfile/Dockerfile")
}

dockerRun {
    name "${project.name}"
    image "formkiq/${project.name}:${project.version}"
    ports '8080:8080'
    clean true
    daemonize false
}

check.dependsOn tasks.docker