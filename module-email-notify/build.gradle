	
description = "FormKiQ Core - Email Notify Module"

dependencies {
    testImplementation project(':aws-s3')
    testImplementation project(':aws-sqs')
    testImplementation project(':aws-ssm')
    testImplementation project(':aws-sns')
    testImplementation group: 'junit', name: 'junit', version:'4.+'
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
}

test {
  failFast = true
  exclude 'com/formkiq/stacks/module/emailnotify/awstest/**' 
}

task testaws(type: Test) {
  description = 'Runs AWS integration tests.'
  outputs.upToDateWhen {false}
  include 'com/formkiq/stacks/module/emailnotify/awstest/**'    
}

task npmtest {
  inputs.files("${project.projectDir}/src/index.js", "${project.projectDir}/src/test/index.js")
  outputs.file("$buildDir/${project.name}_index.js_${project.version}")

  doFirst {
	macroLocalStackStart()
  }
  
  doLast {
    exec {
      commandLine "bash", "-c", "cd src ; npm install ; npm test"
    }
    macroDockerComposeDown()
  }
}

task buildZip(type: Zip) {   
   from "src"
   include "*"
   include "*/*"
   exclude "test", "coverage"
   archiveName "module-email-notify.zip"
   destinationDir(file("${buildDir}/distributions"))
}

task uploadToS3 {
  outputs.dir("${buildDir}/distributions")
  doLast {
	exec {
	  commandLine "bash", "-c", "aws s3 cp ${buildDir}/distributions/module-email-notify.zip s3://${distrobucket}/formkiq-core/${project.version}/module-email-notify.zip --profile ${testprofile}"
	}
  }
}

task assembleTemplate {
    dependsOn buildZip
	inputs.files("template-sar.yaml", "template-docker-snippet.yaml")
	outputs.files("build/formkiq-core.yaml", "build/formkiq-core-sar.yaml")
	doLast {
		// build SAM distribution
		exec {
			commandLine "bash", "-c", "yq d template-sar.yaml 'Metadata' > template.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq m template.yaml template-docker-snippet.yaml > build/formkiq-core-docker.yaml"
		}
		exec {
			commandLine "bash", "-c", "yq d -i build/formkiq-core-docker.yaml 'Resources.EmailNotify.Properties.CodeUri'"
		}	
		// build SAR distribution
		exec {
			commandLine "bash", "-c", "sam package --template-file template-sar.yaml --s3-bucket ${distrobucket} --region ${testregion} --profile ${testprofile} --output-template-file build/formkiq-core-sar.yaml"
		}
	}
}

task buildDockerImage {
  dependsOn buildZip
  inputs.files("Dockerfile", "src/index.js")
  doLast {
	exec {
	  commandLine "bash", "-c", "docker build -t formkiq-core-module-email-notify ."
	}
  }
}

task dockerpush {
  dependsOn buildDockerImage
  outputs.upToDateWhen {false}
  doLast {
	exec {
	  commandLine "bash", "-c", "aws ecr-public get-login-password --region ${testregion} --profile ${testprofile} | docker login --username AWS --password-stdin public.ecr.aws/n3i8r5o8"
	}
	exec {
	  commandLine "bash", "-c", "docker tag formkiq-core-module-email-notify:latest public.ecr.aws/n3i8r5o8/formkiq-core-module-email-notify:${project.version}"
	}
	exec {
	  commandLine "bash", "-c", "docker push public.ecr.aws/n3i8r5o8/formkiq-core-module-email-notify:${project.version}"
	}
  }  
}

test.dependsOn npmtest
buildZip.dependsOn check
uploadToS3.dependsOn buildZip
build.dependsOn uploadToS3, assembleTemplate
