#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@overlay/match by=overlay.all
---
Resources:

  #@overlay/match missing_ok=True
  ApiKeyAuthorizer:
    Type: AWS::Serverless::Function
    DependsOn:
    - ApiKeyAuthorizerRole
    Properties:
      Handler: com.formkiq.module.lambda.authorizer.apikey.ApiKeyAuthorizerRequestHandler
      Description: Lambda function that processes ApiKey Authorizer
      Runtime: provided
      Timeout: 
        Fn::Sub: "${LambdaTimeout}"
      MemorySize: 
        Fn::Sub: "${LambdaMemory}"
      CodeUri: ./formkiq-module-lambda-authorizer-apikey.zip
      Tracing: Active
      AutoPublishCodeSha256: #@ data.values.hash or assert.fail("missing version")
      Environment:
        Variables:
          APP_ENVIRONMENT: 
            Fn::Sub: "${AppEnvironment}"
          DEBUG: false
          ENABLE_AWS_X_RAY: true
          DOCUMENTS_TABLE: 
            Fn::Sub: "{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}"
          FORMKIQ_TYPE: 
            Ref: FormKiQType
      Role: 
        Fn::GetAtt:
        - ApiKeyAuthorizerRole
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  #@overlay/match missing_ok=True
  ApiKeyAuthorizerInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ApiKeyAuthorizer
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Ref: ApiKeyAuthorizer
      Principal: apigateway.amazonaws.com

  #@overlay/match missing_ok=True
  ApiKeyAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        -
          PolicyName: apikeylambdarole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:Get*
              - dynamodb:Query
              Resource: 
              - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/{{resolve:ssm:/formkiq/${AppEnvironment}/dynamodb/DocumentsTableName}}"