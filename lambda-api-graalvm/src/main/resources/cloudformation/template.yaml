#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FormKiQ Core - API
    
Parameters:
              
  AppEnvironment:
    Type: String
    AllowedPattern: ".+"
    Description: The FormKiQ Environment

  FormKiQType:
    Description: The type of FormKiQ installation
    Default: "core"
    Type: String
    AllowedValues: ["core", "enterprise"]
    
  LambdaMemory:
    Type: Number
    Description: The amount of memory used by lambda function (MB)
    Default: 1024
    MinValue: 128
    MaxValue: 3008
  
  LambdaTimeout:
    Type: String
    Description: The maximum amount of seconds lambda function will run for (seconds)
    Default: 60

  EnablePublicUrls:
    Description: Whether to enable public urls
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  AllowAdminCreateUserOnly:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
     
  PasswordMinimumLength:
    Type: Number
    Description: The minimum password length.
    MinValue: "6"
    MaxValue: "99"
    Default: "8"
    
  PasswordRequireLowercase:
    Description: Password requires at least one lowercase letter.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireNumbers:
    Description: Password requires at least one number.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireSymbols:
    Description: Password requires at least one symbol.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
    
  PasswordRequireUppercase:
    Description: Password requires at least one uppercase letter.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]    

  CognitoUserPool:
    Type: String
    Description: The Cognito User Pool Id
    AllowedPattern: ".+"

  CognitoUserPoolClient:
    Type: String
    Description: The Cognito User Pool Client Id
    AllowedPattern: ".+"

  WebsocketSqsQueueUrl:
    Type: String
    Description: "SQS URL for processing Websocket Messages"
    AllowedPattern: ".+"
   
  UserAuthentication:
    Description: How are the users authenticating
    AllowedPattern: ".+"
    Type: String
    Default: "cognito"

  TypesenseApiKey:
    Type: String
    Description: TypeSense API Key
    
  TypesenseApiEndpoint:
    Type: String
    Description: TypeSense API Endpoint

  VpcStackName:
    Type: String
    Description: FormKiQ VPC Stack Name 

  CertificateStackName:
    Type: String
    Description: The name of the FormKiQ Certificate Stack Name
    Default: ""

  Partition:
    Description: The partition in which the resource is located. A partition is a group of AWS Regions
    Type: String

Conditions:

  HasCertificateStackName:
    Fn::Not:
      - Fn::Equals: 
        - Ref: CertificateStackName
        - ''

Resources:        

  ApiLambda:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./api-lambda.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        FormKiQType: 
          Ref: FormKiQType
        CognitoUserPool:
          Ref: CognitoUserPool
        CognitoUserPoolClient:
          Ref: CognitoUserPoolClient
        WebsocketSqsQueueUrl:
          Ref: WebsocketSqsQueueUrl
        UserAuthentication:
          Ref: UserAuthentication
        TypesenseApiKey:
          Ref: TypesenseApiKey
        TypesenseApiEndpoint:
          Ref: TypesenseApiEndpoint
        OcrBucket:
          Ref: OcrBucket
        OcrQueueUrl:
          Fn::GetAtt: 
            - OcrQueue
            - QueueUrl
        VpcStackName:
          Ref: VpcStackName
        Partition:
          Ref: Partition
        EnablePublicUrls:
          Ref: EnablePublicUrls
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  HttpApi:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./api.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Ref: Partition
        CognitoUserPool:
          Ref: CognitoUserPool
        CognitoUserPoolClient:
          Ref: CognitoUserPoolClient
        OcrApiRequestsArn:
          Fn::GetAtt: 
          - Ocr
          - Outputs.OcrProcessor
        DocumentsApiRequestsArn:
          Fn::GetAtt: 
          - ApiLambda
          - Outputs.DocumentsApiRequestsArn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  IamApi:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./api-iam.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Ref: Partition
        DocumentsApiRequestsArn:
          Fn::GetAtt: 
          - ApiLambda
          - Outputs.DocumentsApiRequestsArn
        OcrApiRequestsArn:
          Fn::GetAtt: 
          - Ocr
          - Outputs.OcrProcessor
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  KeyApi:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./api-apikey.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Ref: Partition
        FormKiQType:
          Ref: FormKiQType
        DocumentsApiRequestsArn:
          Fn::GetAtt: 
          - ApiLambda
          - Outputs.DocumentsApiRequestsArn
        OcrApiRequestsArn:
          Fn::GetAtt: 
          - Ocr
          - Outputs.OcrProcessor
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  DocumentsApiInvokePermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ApiLambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::GetAtt: 
        - ApiLambda
        - Outputs.DocumentsApiRequests
      Principal: apigateway.amazonaws.com
      
  DocumentsStageAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: 
        Fn::Sub: "/aws/vendedlogs/${AWS::StackName}/APIDocumentsHttpAccessLogs"
      
  IamDocumentsStageAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: 
        Fn::Sub: "/aws/vendedlogs/${AWS::StackName}/APIDocumentsIamAccessLogs"

  KeyDocumentsStageAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
      LogGroupName: 
        Fn::Sub: "/aws/vendedlogs/${AWS::StackName}/APIDocumentsKeyAccessLogs"
      
  DocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - HttpApi
    Properties:
      ApiId: 
        Fn::GetAtt:
          - HttpApi
          - Outputs.DocumentsHttpApi
      AutoDeploy: true
      Description: 
        Fn::Sub: "Documents API ${AppEnvironment}"
      StageName: "$default"
      AccessLogSettings:
        DestinationArn: 
          Fn::GetAtt: 
          - DocumentsStageAccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'

  DocumentsStageMapping:
    Condition: HasCertificateStackName
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Properties:
      DomainName:
        Fn::ImportValue:
          Fn::Sub: '${CertificateStackName}-HttpApiDomain'
      ApiId: 
        Fn::GetAtt:
          - HttpApi
          - Outputs.DocumentsHttpApi
      Stage: 
        Ref: DocumentsStage

  IamDocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - IamApi
    Properties:
      ApiId: 
        Fn::GetAtt:
          - IamApi
          - Outputs.DocumentsIamApi
      AutoDeploy: true
      Description: 
        Fn::Sub: "Documents IAM API ${AppEnvironment}"
      StageName: "$default"
      AccessLogSettings:
        DestinationArn: 
          Fn::GetAtt: 
          - IamDocumentsStageAccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'

  IamDocumentsStageMapping:
    Condition: HasCertificateStackName
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Properties:
      DomainName:
        Fn::ImportValue:
          Fn::Sub: '${CertificateStackName}-IamApiDomain'
      ApiId: 
        Fn::GetAtt:
          - IamApi
          - Outputs.DocumentsIamApi
      Stage: 
        Ref: IamDocumentsStage

  KeyDocumentsStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - KeyApi
    Properties:
      ApiId: 
        Fn::GetAtt:
          - KeyApi
          - Outputs.DocumentsKeyApi
      AutoDeploy: true
      Description: 
        Fn::Sub: "Documents API Key ${AppEnvironment}"
      StageName: "$default"
      AccessLogSettings:
        DestinationArn: 
          Fn::GetAtt: 
          - KeyDocumentsStageAccessLogs
          - Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'

  KeyDocumentsStageMapping:
    Condition: HasCertificateStackName
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Properties:
      DomainName:
        Fn::ImportValue:
          Fn::Sub: '${CertificateStackName}-KeyApiDomain'
      ApiId: 
        Fn::GetAtt:
          - KeyApi
          - Outputs.DocumentsKeyAp
      Stage: 
        Ref: KeyDocumentsStage

  DocumentsHttpApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ID for the API endpoint that uses Cognito authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsHttpId"
      Type: String
      Value: 
        Fn::GetAtt:
          - HttpApi
          - Outputs.DocumentsHttpApi
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  DocumentsHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses Cognito authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsHttpUrl"
      Type: String
      Value:
        Fn::If:
          - HasCertificateStackName
          - Fn::Join:
            - ''
            - - 'https://'
              - Fn::ImportValue:
                  Fn::Sub: '${CertificateStackName}-HttpApiDomain'
          - Fn::GetAtt:
            - HttpApi
            - Outputs.DocumentsHttpApiUrl
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  DocumentsPublicHttpApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The Public URL for the API endpoint that uses Cognito authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsPublicHttpUrl"
      Type: String
      Value: 
        Fn::If:
          - HasCertificateStackName
          - Fn::Join:
            - ''
            - - 'https://'
              - Fn::ImportValue:
                  Fn::Sub: '${CertificateStackName}-HttpApiDomain'
          - Fn::GetAtt:
            - HttpApi
            - Outputs.DocumentsHttpApiUrl
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  DocumentsIamApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses IAM authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsIamUrl"
      Type: String
      Value: 
        Fn::If:
          - HasCertificateStackName
          - Fn::Join:
            - ''
            - - 'https://'
              - Fn::ImportValue:
                  Fn::Sub: '${CertificateStackName}-IamApiDomain'
          - Fn::GetAtt:
            - IamApi
            - Outputs.DocumentsIamApiUrl
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  DocumentsIamApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ID for the API endpoint that uses IAM authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsIamId"
      Type: String
      Value: 
        Fn::GetAtt:
          - IamApi
          - Outputs.DocumentsIamApi
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  DocumentsKeyApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The URL for the API endpoint that uses API Key authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsKeyUrl"
      Type: String
      Value: 
        Fn::If:
          - HasCertificateStackName
          - Fn::Join:
            - ''
            - - 'https://'
              - Fn::ImportValue:
                  Fn::Sub: '${CertificateStackName}-IamApiDomain'
          - Fn::GetAtt:
            - KeyApi
            - Outputs.DocumentsKeyApiUrl
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
          
  DocumentsKeyApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ID for the API endpoint that uses API Key authorization"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/api/DocumentsKeyId"
      Type: String
      Value: 
        Fn::GetAtt:
          - KeyApi
          - Outputs.DocumentsKeyApi
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
        
  DocumentsApiRequestsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Lambda for processing API Requests"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/lambda/DocumentsApiRequests"
      Type: String
      Value: 
        Fn::GetAtt: 
        - ApiLambda
        - Outputs.DocumentsApiRequests
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: 
        Fn::GetAtt:
        - CloudWatchRole
        - Arn 

  ApiGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: "Application"
          Value: 
            Fn::Sub: "FormKiQ ${FormKiQType}"        
        - Key: "AppEnvironment"
          Value: 
            Fn::Sub: "${AppEnvironment}"
        - Key: "StackName"
          Value: 
            Fn::Sub: "${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"

  ApiGatewayInvokeGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - Fn::Sub: "arn:${Partition}:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"

  ApiGatewayInvokeGroupParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroup"
      Type: String
      Value: 
        Ref: ApiGatewayInvokeGroup
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  ApiGatewayInvokeGroupArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Group Arn that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeGroupArn"
      Type: String
      Value: 
        Fn::GetAtt:
        - ApiGatewayInvokeGroup
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"
    
  ApiGatewayInvokeRoleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRole"
      Type: String
      Value: 
        Ref: ApiGatewayInvokeRole
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  ApiGatewayInvokeRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "API Gateway Role Arn that allows invoking of endpoints"
      Name: 
        Fn::Sub: "/formkiq/${AppEnvironment}/iam/ApiGatewayInvokeRoleArn"
      Type: String
      Value: 
        Fn::GetAtt:
        - ApiGatewayInvokeRole
        - Arn
      Tags:
        Application: 
          Fn::Sub: "FormKiQ ${FormKiQType}"
        AppEnvironment: 
          Fn::Sub: "${AppEnvironment}"
        StackName: 
          Fn::Sub: "${AWS::StackName}"

  Ocr:
    Type: AWS::Serverless::Application
    DependsOn:
      - OcrBucket
      - OcrQueue
    Properties:
      Location: template-ocr.yaml
      Parameters:
        AppEnvironment: 
          Ref: AppEnvironment
        Partition:
          Ref: Partition
          
Outputs:
  ApiGatewayInvokeRole:
    Description: "API Gateway Role that allows invoking of endpoints"
    Value: 
      Ref: ApiGatewayInvokeRole
  ApiGatewayInvokeRoleArn:
    Description: "API Gateway Role Arn that allows invoking of endpoints"
    Value: 
      Fn::GetAtt:
      - ApiGatewayInvokeRole
      - Arn
  ApiGatewayInvokeGroup:
    Description: "API Gateway Group that allows invoking of endpoints"
    Value: 
      Ref: ApiGatewayInvokeGroup
  ApiGatewayInvokeGroupArn:
    Description: "API Gateway Group ARN that allows invoking of endpoints"
    Value: 
      Fn::GetAtt:
      - ApiGatewayInvokeGroup
      - Arn    
  DocumentsApiRequests:
    Description: "FormKiQ Api Request Handler"
    Value:
      Fn::GetAtt: 
      - ApiLambda
      - Outputs.DocumentsApiRequests
  DocumentsIamApiUrl:
    Description: "The endpoint url for the IAM API"
    Value: 
      Fn::If:
        - HasCertificateStackName
        - Fn::Join:
          - ''
          - - 'https://'
            - Fn::ImportValue:
                Fn::Sub: '${CertificateStackName}-IamApiDomain'
        - Fn::GetAtt:
          - IamApi
          - Outputs.DocumentsIamApiUrl
  DocumentsKeyApiUrl:
    Description: "The endpoint url for the Key API"
    Value: 
      Fn::If:
        - HasCertificateStackName
        - Fn::Join:
          - ''
          - - 'https://'
            - Fn::ImportValue:
                Fn::Sub: '${CertificateStackName}-KeyApiDomain'
        - Fn::GetAtt:
          - KeyApi
          - Outputs.DocumentsKeyApiUrl    
  DocumentsHttpApiUrl:
    Description: "The endpoint url for the Http API"
    Value:
      Fn::If:
        - HasCertificateStackName
        - Fn::Join:
          - ''
          - - 'https://'
            - Fn::ImportValue:
                Fn::Sub: '${CertificateStackName}-HttpApiDomain'
        - Fn::GetAtt:
          - HttpApi
          - Outputs.DocumentsHttpApiUrl